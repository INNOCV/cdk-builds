{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/a11y/aria-describer/aria-reference.ts","../../src/cdk/a11y/aria-describer/aria-describer.ts","../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../src/cdk/a11y/live-announcer/live-announcer.ts","../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../src/cdk/a11y/fake-mousedown.ts","../../src/cdk/a11y/key-manager/list-key-manager.ts","../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../src/cdk/a11y/focus-trap/focus-trap.ts","../../src/cdk/a11y/live-announcer/live-announcer-token.ts","../../src/cdk/a11y/a11y-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are deliminated by an empty space, as per the spec. */\nconst ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber {\n  private _document: Document;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: string) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n\n    const registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements =\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string) {\n    const messageElement = this._document.createElement('div');\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild(this._document.createTextNode(message)!);\n\n    if (!messagesContainer) { this._createMessagesContainer(); }\n    messagesContainer!.appendChild(messageElement);\n\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(message: string) {\n    const registeredMessage = messageRegistry.get(message);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    messagesContainer = this._document.createElement('div');\n    messagesContainer.setAttribute('id', MESSAGES_CONTAINER_ID);\n    messagesContainer.setAttribute('aria-hidden', 'true');\n    messagesContainer.style.display = 'none';\n    this._document.body.appendChild(messagesContainer);\n  }\n\n  /** Deletes the global messages container. */\n  private _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, message: string) {\n    const registeredMessage = messageRegistry.get(message)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, message: string): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(message);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string): boolean {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n        !!`${message}`.trim();\n  }\n\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [\n    [new Optional(), new SkipSelf(), AriaDescriber],\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch (e) {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  Provider,\n  SkipSelf,\n} from '@angular/core';\nimport {LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer-token';\n\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private readonly _liveElement: Element;\n\n  constructor(\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n      @Inject(DOCUMENT) private _document: any) {\n\n    // We inject the live element as `any` because the constructor signature cannot reference\n    // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n    // causes TypeScript to preserve the constructor signature types.\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader\n   * @param politeness The politeness of the announcer element\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness: AriaLivePoliteness = 'polite'): Promise<void> {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this._liveElement.textContent = message;\n        resolve();\n      }, 100);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n\n  private _createLiveElement(): Element {\n    let liveEl = this._document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, _document: any) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const LIVE_ANNOUNCER_PROVIDER: Provider = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    DOCUMENT,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  SkipSelf,\n} from '@angular/core';\nimport {of as observableOf, Observable, Subject, Subscription} from 'rxjs';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  subject: Subject<FocusOrigin>\n};\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The target of the last touch event. */\n  private _lastTouchTarget: EventTarget | null;\n\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\n  private _touchTimeoutId: number;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** A map of global objects to lists of current listeners. */\n  private _unregisterGlobalListeners = () => {};\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren: boolean = false): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let cachedInfo = this._elementInfo.get(element);\n      cachedInfo!.checkChildren = checkChildren;\n      return cachedInfo!.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n    this._incrementMonitoredElementCount();\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void {\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n      this._decrementMonitoredElementCount();\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element The element to focus.\n   * @param origin The focus origin.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n\n    // `focus` isn't available on the server\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Register necessary event listeners on the document and window. */\n  private _registerGlobalListeners() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    let documentKeydownListener = () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    let documentMousedownListener = () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    let documentTouchstartListener = (event: TouchEvent) => {\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    let windowFocusListener = () => {\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false, 0);\n    };\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n    this._ngZone.runOutsideAngular(() => {\n      document.addEventListener('keydown', documentKeydownListener, true);\n      document.addEventListener('mousedown', documentMousedownListener, true);\n      document.addEventListener('touchstart', documentTouchstartListener,\n          supportsPassiveEventListeners() ? ({passive: true, capture: true} as any) : true);\n      window.addEventListener('focus', windowFocusListener);\n    });\n\n    this._unregisterGlobalListeners = () => {\n      document.removeEventListener('keydown', documentKeydownListener, true);\n      document.removeEventListener('mousedown', documentMousedownListener, true);\n      document.removeEventListener('touchstart', documentTouchstartListener,\n          supportsPassiveEventListeners() ? ({passive: true, capture: true} as any) : true);\n      window.removeEventListener('focus', windowFocusListener);\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    };\n  }\n\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @param origin The origin to set.\n   */\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originTimeoutId = setTimeout(() => this._origin = null, 0);\n    });\n  }\n\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  private _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\n\n  private _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1) {\n      this._registerGlobalListeners();\n    }\n  }\n\n  private _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      this._unregisterGlobalListeners();\n      this._unregisterGlobalListeners = () => {};\n    }\n  }\n\n}\n\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements OnDestroy {\n  private _monitorSubscription: Subscription;\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n    this._monitorSubscription = this._focusMonitor.monitor(\n        this._elementRef.nativeElement,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T;\n  private _wrap = false;\n  private _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  tabOut: Subject<void> = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Turns on wrapping mode, which ensures that the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   */\n  withWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\n      tap(keyCode => this._pressedLetters.push(keyCode)),\n      debounceTime(debounceInterval),\n      filter(() => this._pressedLetters.length > 0),\n      map(() => this._pressedLetters.join(''))\n    ).subscribe(inputString => {\n      const items = this._getItemsArray();\n\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousIndex = this._activeItemIndex;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setNextItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setPreviousItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n    this._activeItemIndex = index;\n    this._activeItem = itemArray[index];\n  }\n\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @param index The new activeItemIndex.\n   * @deprecated Use `updateActiveItem` instead.\n   * @deletion-target 7.0.0\n   */\n  updateActiveItemIndex(index: number): void {\n    this.updateActiveItem(index);\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean { return this._enabled; }\n  set enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\n  private _enabled: boolean = true;\n\n  constructor(\n    private _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _document: Document,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   */\n  attachAnchors(): void {\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor!.addEventListener('focus', () => {\n        this.focusLastTabbableElement();\n      });\n\n      this._endAnchor!.addEventListener('focus', () => {\n        this.focusFirstTabbableElement();\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n        this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      }\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdkFocusRegion${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\n\n    for (let i = 0; i < markers.length; i++) {\n      // @deletion-target 7.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                     `attribute will be removed in 7.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                     `will be removed in 7.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusInitialElement(): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n                                                          `[cdkFocusInitial]`) as HTMLElement;\n\n    if (redirectToElement) {\n      // @deletion-target 7.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 7.0.0`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusFirstTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfuly.\n   */\n  focusLastTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getLastTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n\n/** Factory that allows easy instantiation of focus traps. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit {\n  private _document: Document;\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input('cdkTrapFocus')\n  get enabled(): boolean { return this.focusTrap.enabled; }\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input('cdkTrapFocusAutoCapture')\n  get autoCapture(): boolean { return this._autoCapture; }\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\n  private _autoCapture: boolean;\n\n  constructor(\n      private _elementRef: ElementRef,\n      private _focusTrapFactory: FocusTrapFactory,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The token for the live announcer element is defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\n      providedIn: 'root',\n      factory: () => null,\n    });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","ID_DELIMINATOR","removeAriaReferencedId","filteredIds","filter","val","getAttribute","match","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","_document","AriaDescriber","getFrameElement","window","e","hasGeometry","element","offsetWidth","offsetHeight","getClientRects","length","isNativeFormElement","nodeName","toLowerCase","isHiddenInput","isInputElement","type","isAnchorWithHref","isAnchorElement","hasAttribute","hasValidTabIndex","undefined","tabIndex","isNaN","parseInt","getTabIndexValue","isPotentiallyTabbableIOS","inputType","isPotentiallyFocusable","getWindow","node","ownerDocument","defaultView","LIVE_ANNOUNCER_PROVIDER_FACTORY","liveElement","LiveAnnouncer","FOCUS_MONITOR_PROVIDER_FACTORY","ngZone","platform","FocusMonitor","isFakeMousedownFromScreenReader","event","buttons","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextId","messageRegistry","Map","messagesContainer","describe","hostElement","message","_canBeDescribed","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_removeMessageReference","registeredMessage","get","referenceCount","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","CDK_DESCRIBEDBY_ID_PREFIX","appendChild","createTextNode","_createMessagesContainer","set","removeChild","delete","style","display","body","parentNode","originalReferenceIds","indexOf","referenceIds","messageId","nodeType","ELEMENT_NODE","Injectable","args","providedIn","decorators","Inject","DOCUMENT","ARIA_DESCRIBER_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ListKeyManager","_items","_this","_activeItemIndex","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","EMPTY","_vertical","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","QueryList","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","tap","keyCode","debounceTime","map","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","onKeydown","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","defineProperty","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","_super","tslib_1.__extends","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","_origin","setFocusOrigin","origin","focus","InteractivityChecker","_platform","isDisabled","isVisible","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","frameType","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isFocusable","Platform","FocusTrap","_element","_checker","_ngZone","deferAnchors","_enabled","attachAnchors","_startAnchor","_endAnchor","destroy","_createAnchor","runOutsideAngular","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","root","children","tabbableChild","anchor","classList","add","fn","isStable","onStable","asObservable","take","FocusTrapFactory","deferCaptureElements","NgZone","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","value","coerceBooleanProperty","_autoCapture","ngAfterContentInit","autoCapture","Directive","selector","exportAs","ElementRef","Input","LIVE_ANNOUNCER_ELEMENT_TOKEN","InjectionToken","factory","elementToken","_liveElement","_createLiveElement","announce","politeness","textContent","setTimeout","liveEl","LIVE_ANNOUNCER_PROVIDER","_windowFocused","_elementInfo","_unregisterGlobalListeners","_monitoredElementCount","monitor","checkChildren","observableOf","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","removeEventListener","stopMonitoring","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","focusVia","_setOriginForCurrentEventQueue","forEach","_info","_registerGlobalListeners","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","clearTimeout","target","windowFocusListener","_windowFocusTimeoutId","document","supportsPassiveEventListeners","passive","capture","_originTimeoutId","_toggleClass","className","shouldSet","remove","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","relatedTarget","CdkMonitorFocus","_focusMonitor","cdkFocusChange","EventEmitter","_monitorSubscription","emit","Output","FOCUS_MONITOR_PROVIDER","NgModule","imports","CommonModule","PlatformModule","declarations","exports","A11yModule"],"mappings":"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"}