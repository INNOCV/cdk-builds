{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../src/cdk/scrolling/virtual-for-of.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ListRange} from '@angular/cdk/collections';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport. */\n  private _bufferSize: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param bufferSize The number of buffer items to render beyond the edge of the viewport.\n   */\n  constructor(itemSize: number, bufferSize: number) {\n    this._itemSize = itemSize;\n    this._bufferSize = bufferSize;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param bufferSize he number of buffer items to render beyond the edge of the viewport.\n   */\n  updateItemAndBufferSize(itemSize: number, bufferSize: number) {\n    this._itemSize = itemSize;\n    this._bufferSize = bufferSize;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    const firstVisibleIndex = Math.floor(scrollOffset / this._itemSize);\n    const firstItemRemainder = scrollOffset % this._itemSize;\n    const range = this._expandRange(\n        {start: firstVisibleIndex, end: firstVisibleIndex},\n        this._bufferSize,\n        Math.ceil((this._viewport.getViewportSize() + firstItemRemainder) / this._itemSize) +\n            this._bufferSize);\n    this._viewport.setRenderedRange(range);\n    this._viewport.setRenderedContentOffset(this._itemSize * range.start);\n\n    this._scrolledIndexChange.next(firstVisibleIndex);\n  }\n\n  /**\n   * Expand the given range by the given amount in either direction.\n   * @param range The range to expand\n   * @param expandStart The number of items to expand the start of the range by.\n   * @param expandEnd The number of items to expand the end of the range by.\n   * @return The expanded range.\n   */\n  private _expandRange(range: ListRange, expandStart: number, expandEnd: number): ListRange {\n    if (!this._viewport) {\n      return {...range};\n    }\n\n    const start = Math.max(0, range.start - expandStart);\n    const end = Math.min(this._viewport.getDataLength(), range.end + expandEnd);\n    return {start, end};\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The number of extra elements to render on either side of the scrolling viewport.\n   * Defaults to 5 elements.\n   */\n  @Input()\n  get bufferSize(): number { return this._bufferSize; }\n  set bufferSize(value: number) { this._bufferSize = coerceNumberProperty(value); }\n  _bufferSize = 5;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.bufferSize);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.bufferSize);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  constructor(private _ngZone: NgZone, private _platform: Platform) { }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    const scrollSubscription = scrollable.elementScrolled()\n        .subscribe(() => this._scrolled.next(scrollable));\n\n    this.scrollContainers.set(scrollable, scrollSubscription);\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    return this._platform.isBrowser ? Observable.create(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    }) : observableOf<void>();\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListRange} from '@angular/cdk/collections';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animationFrameScheduler, fromEvent, Observable, Subject} from 'rxjs';\nimport {sample, sampleTime, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkVirtualScrollViewport implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** Emits when a change detection cycle completes. */\n  private _changeDetectionComplete = new Subject<void>();\n\n  /** The direction the viewport scrolls. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> =\n      Observable.create(observer => this._scrollStrategy.scrolledIndexChange\n          .pipe(sample(this._changeDetectionComplete))\n          .subscribe(observer));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper') _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The transform used to scale the spacer to the same size as all content, including content that\n   * is not currently rendered.\n   */\n  _totalContentSizeTransform = '';\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** The pending scroll offset to be applied during the next change detection cycle. */\n  private _pendingScrollOffset: number | null;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Observable that emits when the viewport is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _ngZone: NgZone,\n              @Inject(VIRTUAL_SCROLL_STRATEGY) private _scrollStrategy: VirtualScrollStrategy) {}\n\n  ngOnInit() {\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      fromEvent(this.elementRef.nativeElement, 'scroll')\n          // Sample the scroll stream at every animation frame. This way if there are multiple\n          // scroll events in the same frame we only need to recheck our layout once.\n          .pipe(sampleTime(0, animationFrameScheduler), takeUntil(this._destroyed))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n    this._destroyed.next();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._changeDetectionComplete.complete();\n    this._destroyed.complete();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this._ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    const axis = this.orientation === 'horizontal' ? 'X' : 'Y';\n    let transform = `translate${axis}(${Number(offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the offset on the viewport.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const viewportElement = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      const offsetDirection = this.orientation === 'horizontal' ? 'left' : 'top';\n      viewportElement.scrollTo({[offsetDirection]: offset, behavior});\n    } else {\n      if (this.orientation === 'horizontal') {\n        viewportElement.scrollLeft = offset;\n      } else {\n        viewportElement.scrollTop = offset;\n      }\n    }\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /** @docs-private Internal method to set the scroll offset on the viewport. */\n  setScrollOffset(offset: number) {\n    // Rather than setting the offset immediately, we batch it up to be applied along with other DOM\n    // writes during the next change detection cycle.\n    this._pendingScrollOffset = offset;\n    this._markChangeDetectionNeeded();\n  }\n\n  /** Gets the current scroll offset of the viewport (in pixels). */\n  measureScrollOffset(): number {\n    return this.orientation === 'horizontal' ?\n        this.elementRef.nativeElement.scrollLeft : this.elementRef.nativeElement.scrollTop;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this._ngZone.run(() => this._changeDetectorRef.markForCheck());\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply the pending scroll offset separately, since it can't be set up as an Angular binding.\n    if (this._pendingScrollOffset != null) {\n      if (this.orientation === 'horizontal') {\n        this.elementRef.nativeElement.scrollLeft = this._pendingScrollOffset;\n      } else {\n        this.elementRef.nativeElement.scrollTop = this._pendingScrollOffset;\n      }\n    }\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n\n    this._ngZone.run(() => this._changeDetectionComplete.next());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ArrayDataSource, CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n    this._cdkVirtualForOf = value;\n    const ds = value instanceof DataSource ? value :\n        // Slice the value if its an NgIterable to ensure we're working with an array.\n        new ArrayDataSource<T>(\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n    this._dataSourceChanges.next(ds);\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[]> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      this.viewChange.next(this._renderedRange);\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>): Observable<T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n    this._needsUpdate = true;\n    return newDs.connect(this);\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation(\n        (record: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (record.previousIndex == null) {  // Item added.\n            const view = this._getViewForNewItem();\n            this._viewContainerRef.insert(view, currentIndex);\n            view.context.$implicit = record.item;\n          } else if (currentIndex == null) {  // Item removed.\n            this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>);\n          } else {  // Item moved.\n            const view = this._viewContainerRef.get(adjustedPreviousIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            this._viewContainerRef.move(view, currentIndex);\n            view.context.$implicit = record.item;\n          }\n        });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      view.destroy();\n    }\n  }\n\n  /** Get a view for a new item, either from the cache or by creating a new one. */\n  private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      cdkVirtualForOf: this._cdkVirtualForOf,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    });\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  constructor(private _platform: Platform, ngZone: NgZone) {\n    this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\n      return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n    }) : observableOf();\n\n    this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const documentRect = document.documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 document.documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled();\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged();\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered();\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged();\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _elementScrolled: Subject<Event> = new Subject();\n  private _scrollListener = (event: Event) => this._elementScrolled.next(event);\n\n  constructor(private _elementRef: ElementRef,\n              private _scroll: ScrollDispatcher,\n              private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    this._ngZone.runOutsideAngular(() => {\n      this.getElementRef().nativeElement.addEventListener('scroll', this._scrollListener);\n    });\n\n    this._scroll.register(this);\n  }\n\n  ngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this.getElementRef().nativeElement.removeEventListener('scroll', this._scrollListener);\n    }\n\n    this._elementScrolled.complete();\n  }\n\n  /**\n   * Returns observable that emits when a scroll event is fired on the host element.\n   */\n  elementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n\n  getElementRef(): ElementRef {\n    return this._elementRef;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: [\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * @breaking-change 8.0.0 delete this alias\n */\n@NgModule({\n  imports: [ScrollingModule],\n  exports: [ScrollingModule],\n})\nexport class ScrollDispatchModule {}\n"],"names":["_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","ScrollDispatcher","rangesEqual","r1","r2","start","end","getSize","orientation","node","el","getBoundingClientRect","rect","width","height","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","ViewportRuler","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","bufferSize","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_bufferSize","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","Math","floor","firstItemRemainder","range","_expandRange","ceil","getViewportSize","setRenderedRange","setRenderedContentOffset","next","expandStart","expandEnd","max","min","tslib_1.__assign","defineProperty","CdkFixedSizeVirtualScroll","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","Input","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","scrollSubscription","elementScrolled","subscribe","set","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","create","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","NgZone","Platform","SCROLL_DISPATCHER_PROVIDER","Optional","SkipSelf","CdkScrollable","_elementRef","_scroll","_elementScrolled","_scrollListener","event","ngOnInit","addEventListener","removeEventListener","asObservable","ElementRef","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","_changeDetectionComplete","sample","renderedRangeStream","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_destroyed","_isChangeDetectionPending","_runAfterChangeDetection","Promise","resolve","then","_measureViewportSize","sampleTime","animationFrameScheduler","takeUntil","_markChangeDetectionNeeded","forOf","_forOf","Error","dataStream","data","newLength","getRenderedRange","size","axis","getOffsetToRenderedContentStart","offset","to","transform","Number","_renderedContentTransform","measureRenderedContentSize","viewportElement","supportsScrollBehavior","offsetDirection","scrollTo","_a","scrollLeft","scrollTop","setScrollOffset","_pendingScrollOffset","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","clientWidth","clientHeight","runAfter","_doChangeDetection","run","markForCheck","style","runAfterChangeDetection","_i","runAfterChangeDetection_1","fn","Component","template","styles","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","undefined","decorators","Inject","propDecorators","ViewChild","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","startWith","pairwise","switchMap","prev","cur","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","DataSource","ArrayDataSource","Array","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_getViewForNewItem","insert","$implicit","_cacheView","move","forEachIdentityChange","pop","createEmbeddedView","cdkVirtualForOf","first","last","odd","even","ViewContainerRef","TemplateRef","IterableDiffers","cdkVirtualForTemplate","NgModule","imports","PlatformModule","exports","declarations","ScrollingModule","ScrollDispatchModule","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","top","left","bottom","right","documentRect","documentElement","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER"],"mappings":"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"}