{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../src/cdk/scrolling/virtual-for-of.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength,\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0,\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy =\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  constructor(private _ngZone: NgZone, private _platform: Platform) { }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    const scrollSubscription = scrollable.elementScrolled()\n        .subscribe(() => this._scrolled.next(scrollable));\n\n    this.scrollContainers.set(scrollable, scrollSubscription);\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    return this._platform.isBrowser ? Observable.create(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    }) : observableOf<void>();\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListRange} from '@angular/cdk/collections';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animationFrameScheduler, fromEvent, Observable, Subject} from 'rxjs';\nimport {sampleTime, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkVirtualScrollViewport implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> = Observable.create(observer =>\n      this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n          Promise.resolve().then(() => this._ngZone.run(() => observer.next(index)))));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper') _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The transform used to scale the spacer to the same size as all content, including content that\n   * is not currently rendered.\n   */\n  _totalContentSizeTransform = '';\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** The pending scroll offset to be applied during the next change detection cycle. */\n  private _pendingScrollOffset: number | null;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Observable that emits when the viewport is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _ngZone: NgZone,\n              @Inject(VIRTUAL_SCROLL_STRATEGY) private _scrollStrategy: VirtualScrollStrategy) {}\n\n  ngOnInit() {\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      fromEvent(this.elementRef.nativeElement, 'scroll')\n          // Sample the scroll stream at every animation frame. This way if there are multiple\n          // scroll events in the same frame we only need to recheck our layout once.\n          .pipe(sampleTime(0, animationFrameScheduler), takeUntil(this._destroyed))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n    this._destroyed.next();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._destroyed.complete();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this._ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    const axis = this.orientation === 'horizontal' ? 'X' : 'Y';\n    let transform = `translate${axis}(${Number(offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the offset on the viewport.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const viewportElement = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      const offsetDirection = this.orientation === 'horizontal' ? 'left' : 'top';\n      viewportElement.scrollTo({[offsetDirection]: offset, behavior});\n    } else {\n      if (this.orientation === 'horizontal') {\n        viewportElement.scrollLeft = offset;\n      } else {\n        viewportElement.scrollTop = offset;\n      }\n    }\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /** @docs-private Internal method to set the scroll offset on the viewport. */\n  setScrollOffset(offset: number) {\n    // Rather than setting the offset immediately, we batch it up to be applied along with other DOM\n    // writes during the next change detection cycle.\n    this._pendingScrollOffset = offset;\n    this._markChangeDetectionNeeded();\n  }\n\n  /** Gets the current scroll offset of the viewport (in pixels). */\n  measureScrollOffset(): number {\n    return this.orientation === 'horizontal' ?\n        this.elementRef.nativeElement.scrollLeft : this.elementRef.nativeElement.scrollTop;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this._ngZone.run(() => this._changeDetectorRef.markForCheck());\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply the pending scroll offset separately, since it can't be set up as an Angular binding.\n    if (this._pendingScrollOffset != null) {\n      if (this.orientation === 'horizontal') {\n        this.elementRef.nativeElement.scrollLeft = this._pendingScrollOffset;\n      } else {\n        this.elementRef.nativeElement.scrollTop = this._pendingScrollOffset;\n      }\n    }\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ArrayDataSource, CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n    this._cdkVirtualForOf = value;\n    const ds = value instanceof DataSource ? value :\n        // Slice the value if its an NgIterable to ensure we're working with an array.\n        new ArrayDataSource<T>(\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n    this._dataSourceChanges.next(ds);\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[]> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      this.viewChange.next(this._renderedRange);\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>): Observable<T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n    this._needsUpdate = true;\n    return newDs.connect(this);\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation(\n        (record: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (record.previousIndex == null) {  // Item added.\n            const view = this._getViewForNewItem();\n            this._viewContainerRef.insert(view, currentIndex);\n            view.context.$implicit = record.item;\n          } else if (currentIndex == null) {  // Item removed.\n            this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>);\n          } else {  // Item moved.\n            const view = this._viewContainerRef.get(adjustedPreviousIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            this._viewContainerRef.move(view, currentIndex);\n            view.context.$implicit = record.item;\n          }\n        });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      view.destroy();\n    }\n  }\n\n  /** Get a view for a new item, either from the cache or by creating a new one. */\n  private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      cdkVirtualForOf: this._cdkVirtualForOf,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    });\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  constructor(private _platform: Platform, ngZone: NgZone) {\n    this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\n      return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n    }) : observableOf();\n\n    this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition() {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const documentRect = document.documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 document.documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled();\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged();\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered();\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged();\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit} from '@angular/core';\nimport {fromEvent, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _destroyed = new Subject();\n\n  private _elementScrolled: Observable<Event> = Observable.create(observer =>\n      this._ngZone.runOutsideAngular(() =>\n          fromEvent(this._elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n              .subscribe(observer)));\n\n  constructor(private _elementRef: ElementRef,\n              private _scroll: ScrollDispatcher,\n              private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    this._scroll.register(this);\n  }\n\n  ngOnDestroy() {\n    this._scroll.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Returns observable that emits when a scroll event is fired on the host element.\n   */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  getElementRef(): ElementRef {\n    return this._elementRef;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: [\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkScrollable,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * @breaking-change 8.0.0 delete this alias\n */\n@NgModule({\n  imports: [ScrollingModule],\n  exports: [ScrollingModule],\n})\nexport class ScrollDispatchModule {}\n"],"names":["_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","ScrollDispatcher","rangesEqual","r1","r2","start","end","getSize","orientation","node","el","getBoundingClientRect","rect","width","height","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","ViewportRuler","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","this","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","prototype","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","Object","defineProperty","CdkFixedSizeVirtualScroll","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","Input","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","scrollSubscription","elementScrolled","subscribe","set","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","create","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","NgZone","Platform","SCROLL_DISPATCHER_PROVIDER","Optional","SkipSelf","CdkScrollable","_elementRef","_scroll","_destroyed","_elementScrolled","takeUntil","ngOnInit","ElementRef","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_measureViewportSize","sampleTime","animationFrameScheduler","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","size","axis","range","getOffsetToRenderedContentStart","offset","to","transform","Number","_renderedContentTransform","measureRenderedContentSize","viewportElement","supportsScrollBehavior","offsetDirection","scrollTo","_a","scrollLeft","scrollTop","setScrollOffset","_pendingScrollOffset","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","clientWidth","clientHeight","runAfter","_doChangeDetection","markForCheck","style","runAfterChangeDetection","_i","runAfterChangeDetection_1","fn","Component","template","styles","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","undefined","decorators","Inject","propDecorators","ViewChild","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","startWith","pairwise","switchMap","prev","cur","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","DataSource","ArrayDataSource","Array","slice","call","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_getViewForNewItem","insert","$implicit","_cacheView","move","forEachIdentityChange","pop","createEmbeddedView","cdkVirtualForOf","first","last","odd","even","ViewContainerRef","TemplateRef","IterableDiffers","cdkVirtualForTemplate","NgModule","imports","PlatformModule","exports","declarations","ScrollingModule","ScrollDispatchModule","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","top","left","bottom","right","documentRect","documentElement","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER"],"mappings":"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"}