{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/drag-handle.ts","../../src/cdk/drag-drop/drag-placeholder.ts","../../src/cdk/drag-drop/drag-preview.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drop-list-group.ts","../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from './drop-list-container';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {CDK_DRAG_PARENT} from './drag-parent';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<CdkDragConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_hasStartedDragging && _isDragging()',\n  },\n  providers: [{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropListContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Subscription to the stream that initializes the root element. */\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._moveEvents.subscribe(observer);\n        this._moveEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._moveEventSubscriptions--;\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST_CONTAINER) @Optional() @SkipSelf()\n    public dropContainer: CdkDropListContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropListContainer>,\n    @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const rootElement = this._rootElement = this._getRootElement();\n        rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        this._handles.changes.pipe(startWith(null)).subscribe(() =>\n            toggleNativeDragInteractions(rootElement, this.getChildHandles().length > 0));\n      });\n  }\n\n  ngOnDestroy() {\n    // The directive might have been destroyed before the root element is initialized.\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown,\n          activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown,\n          passiveEventListenerOptions);\n\n      // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n      if (this._isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        this._removeElement(this._rootElement);\n      }\n    }\n\n    this._rootElementInitSubscription.unsubscribe();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this._moveEvents.complete();\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Gets only handles that are not inside descendant `CdkDrag` instances. */\n  private getChildHandles() {\n    return this._handles.filter(handle => handle._parentDrag === this);\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    const handles = this.getChildHandles();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (handles.length) {\n      const targetHandle = handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !targetHandle.disabled && !this.disabled) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this._isDragging();\n    const isTouchEvent = this._isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchEvent && (event as MouseEvent).button !== 0;\n    const isSyntheticEvent = !isTouchEvent && this._lastTouchEventTime &&\n        this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this._isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = this.dropContainer._isOverContainer(x, y);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = this._isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      const selector = this.rootElementSelector;\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            (currentElement as any).msMatchesSelector(selector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements, for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_LIST_CONTAINER} from './drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Object used to cache the position of a drag list, its items. and siblings.\n * @docs-private\n */\ninterface PositionCache {\n  /** Cached positions of the items in the list. */\n  items: ItemPositionCacheEntry[];\n  /** Cached positions of the connected lists. */\n  siblings: ListPositionCacheEntry[];\n  /** Dimensions of the list itself. */\n  self: ClientRect;\n}\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface ItemPositionCacheEntry {\n  /** Instance of the drag item. */\n  drag: CdkDrag;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Entry in the position cache for drop lists.\n * @docs-private\n */\ninterface ListPositionCacheEntry {\n  /** Instance of the drop list. */\n  drop: CdkDropList;\n  /** Dimensions of the list. */\n  clientRect: ClientRect;\n}\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dragging'\n  }\n})\nexport class CdkDropList<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDropList<T>>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n\n    if (this._group) {\n      this._group._items.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache: PositionCache = {items: [], siblings: [], self: {} as ClientRect};\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDropList,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    if (!this._dragging) {\n      return this._draggables.toArray().indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.emit({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropList | null {\n    const result = this._positionCache.siblings\n        .find(sibling => isInsideClientRect(sibling.clientRect, x, y));\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y);\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = this._getConnectedLists().map(drop => ({\n      drop,\n      clientRect: drop.element.nativeElement.getBoundingClientRect()\n    }));\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: ItemPositionCacheEntry[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /** Gets an array of unique drop lists that the current list is connected to. */\n  private _getConnectedLists(): CdkDropList[] {\n    const siblings = coerceArray(this.connectedTo).map(drop => {\n      return typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop;\n    });\n\n    if (this._group) {\n      this._group._items.forEach(drop => {\n        if (siblings.indexOf(drop) === -1) {\n          siblings.push(drop);\n        }\n      });\n    }\n\n    return siblings.filter(drop => drop && drop !== this);\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup' | 'wheel', {\n    handler: PointerEventHandler,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventScrollListener,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` and `wheel` events while the element is being dragged.\n   */\n  private _preventScrollListener = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CDK_DRAG_PARENT} from './drag-parent';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDropListContainer,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST_CONTAINER =\n    new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy} from '@angular/core';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './drop-list';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"],"names":["extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getTransform","x","y","Math","round","deepCloneNode","node","clone","cloneNode","removeAttribute","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","copyArrayItem","max","min","findIndex","predicate","isInsideClientRect","clientRect","top","bottom","left","right","activeCapturingEventOptions","normalizePassiveListenerOptions","passive","capture","DragDropRegistry","_ngZone","_document","_this","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","type","startsWith","moveEvent","upEvent","set","handler","e","next","options","forEach","config","_clearGlobalListeners","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","args","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_disabled","_parentDrag","nativeElement","Object","defineProperty","coerceBooleanProperty","Directive","selector","host","class","ElementRef","Optional","disabled","Input","CdkDragPlaceholder","templateRef","TemplateRef","data","CdkDragPreview","CDK_DROP_LIST_CONTAINER","CDK_DRAG_CONFIG","factory","passiveEventListenerOptions","activeEventListenerOptions","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","handles","getChildHandles","targetHandle","handle","contains","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getConstrainedPointerPosition","_hasStartedDragging","abs","_pickupPositionOnPage","run","_startDragSequence","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","_isDragging","_removeSubscriptions","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","emit","getPlaceholderElement","_placeholder","getRootElement","reset","ngAfterViewInit","onStable","asObservable","pipe","take","rootElement","_getRootElement","_handles","changes","startWith","_removeElement","_destroyPreview","_destroyPlaceholder","_nextSibling","filter","referenceElement","stopPropagation","_isTouchEvent","isAuxiliaryMouseButton","button","isSyntheticEvent","_lastTouchEventTime","Date","now","draggable","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","_getPointerPositionOnPage","_pointerPositionAtLastDirectionChange","nextSibling","preview","_preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","start","insertBefore","getItemIndex","_a","isPointerOverContainer","_isOverContainer","item","previousIndex","container","previousContainer","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","width","height","position","zIndex","classList","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","point","targetTouches","pageX","pageY","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","parentNode","removeChild","touches","dropContainerLock","lockAxis","destroy","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","rootElementSelector","currentElement","matches","msMatchesSelector","parentElement","exportAs","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","descendants","ContentChild","Output","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_changeDetectorRef","_group","connectedTo","orientation","enterPredicate","sorted","_dragging","_positionCache","items","siblings","self","_previousSwap","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","markForCheck","_reset","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","slice","reverse","currentItem","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","offset","elementToOffset","_adjustClientRect","result","elementToMeasure","sort","a","b","_getConnectedLists","_","direction","floor","xThreshold","yThreshold","immediateSibling","end","coerceArray","useValue","[id]","[class.cdk-drop-list-dragging]","ChangeDetectorRef","forwardRef","DragDropModule","NgModule","declarations","exports"],"mappings":"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"}