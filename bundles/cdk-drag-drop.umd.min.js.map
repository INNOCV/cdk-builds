{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, OnDestroy {\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    // @breaking-change 8.0.0 `_document` parameter to be made required.\n    @Optional() @Inject(DOCUMENT) _document?: any) {\n\n\n    // @breaking-change 8.0.0 Remove || once `_document` parameter is required.\n    const ref = this._dropListRef = new DropListRef(element, dragDropRegistry,\n        _document || document, dir);\n    ref.data = this;\n    ref.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n    this._syncInputs(ref);\n    this._proxyEvents(ref);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n    this._dropListRef.dispose();\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation)\n        .withItems(this._draggables.map(drag => drag._dragRef));\n    });\n  }\n\n  /**\n   * Proxies the events from a DropListRef to events that\n   * match the interfaces of the CdkDropList outputs.\n   */\n  private _proxyEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n */\ninterface DragHelperTemplate<T = any> {\n  templateRef: TemplateRef<T>;\n  data: T;\n}\n\ninterface DragHandle {\n  element: ElementRef<HTMLElement>;\n  disabled: boolean;\n}\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: DragHandle[] = [];\n\n  /** Whether the native interactions on the element are enabled. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = Observable.create((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _config: DragRefConfig,\n    /** Droppable container that the draggable is a part of. */\n    public dropContainer?: DropListRef,\n    private _dir?: Directionality) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: DragHandle[]): this {\n    // TODO(crisbeto): have this accept HTMLElement[] | ElementRef<HTMLElement>[]\n    this._handles = handles;\n    handles.forEach(handle => toggleNativeDragInteractions(handle.element.nativeElement, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /** Registers the template that should be used for the drag preview. */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    // TODO(crisbeto): have this accept a TemplateRef\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /** Registers the template that should be used for the drag placeholder. */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    // TODO(crisbeto): have this accept a TemplateRef\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = rootElement instanceof ElementRef ? rootElement.nativeElement : rootElement;\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement instanceof ElementRef ?\n        boundaryElement.nativeElement : boundaryElement;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !targetHandle.disabled && !this.disabled) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    if (!this.isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this.dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer!._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this.dropContainer!});\n        this.dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    const shouldEnable = this._handles.length > 0;\n\n    // We go through the trouble of keeping track of whether the interactions are enabled,\n    // because we want to avoid triggering style recalculations unless we really have to.\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Subscription, Observer} from 'rxjs';\nimport {startWith, take, map} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  /** Subscription to the stream that initializes the root element. */\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) private _config: DragRefConfig,\n    @Optional() private _dir: Directionality) {\n\n    const ref = this._dragRef = new DragRef(element, this._document, this._ngZone,\n      this._viewContainerRef, this._viewportRuler, this._dragDropRegistry,\n      this._config, this.dropContainer ? this.dropContainer._dropListRef : undefined,\n      this._dir);\n    ref.data = this;\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(this._placeholderTemplate)\n          .withPreviewTemplate(this._previewTemplate);\n      }\n    });\n    this._proxyEvents(ref);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const rootElement = this._getRootElement();\n\n        if (rootElement.nodeType !== this._document.ELEMENT_NODE) {\n          throw Error(`cdkDrag must be attached to an element node. ` +\n                      `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n\n        this._dragRef.withRootElement(rootElement);\n        this._handles.changes\n          .pipe(startWith(this._handles))\n          .subscribe((handleList: QueryList<CdkDragHandle>) => {\n            this._dragRef.withHandles(handleList.filter(handle => handle._parentDrag === this));\n          });\n      });\n  }\n\n  ngOnDestroy() {\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragRef.dispose();\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : null;\n\n    return rootElement || element;\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /**\n   * Proxies the events from a DragRef to events that\n   * match the interfaces of the CdkDrag outputs.\n   */\n  private _proxyEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Object used to cache the position of a drag list, its items. and siblings.\n * @docs-private\n */\ninterface PositionCache {\n  /** Cached positions of the items in the list. */\n  items: ItemPositionCacheEntry[];\n  /** Cached positions of the connected lists. */\n  siblings: ListPositionCacheEntry[];\n  /** Dimensions of the list itself. */\n  self: ClientRect;\n}\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface ItemPositionCacheEntry {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Entry in the position cache for drop lists.\n * @docs-private\n */\ninterface ListPositionCacheEntry {\n  /** Instance of the drop list. */\n  drop: DropListRef;\n  /** Dimensions of the list. */\n  clientRect: ClientRect;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache: PositionCache = {items: [], siblings: [], self: {} as ClientRect};\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /**\n   * Draggable items in the container.\n   * TODO(crisbeto): support arrays.\n   */\n  private _draggables: DragRef[];\n\n  private _siblings: DropListRef[] = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Amount of connected siblings that currently have a dragged item. */\n  private _activeSiblings = 0;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    private _dir?: Directionality) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cachePositions();\n    this._positionCache.siblings.forEach(sibling => sibling.drop._toggleIsReceiving(true));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items.slice();\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = this._siblings.map(drop => ({\n      drop,\n      clientRect: drop.element.nativeElement.getBoundingClientRect()\n    }));\n  }\n\n  /**\n   * Toggles whether the list can receive the item that is currently being dragged.\n   * Usually called by a sibling that initiated the dragging.\n   */\n  _toggleIsReceiving(isDragging: boolean) {\n    this._activeSiblings = Math.max(0, this._activeSiblings + (isDragging ? 1 : -1));\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._positionCache.siblings.forEach(sibling => sibling.drop._toggleIsReceiving(false));\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: ItemPositionCacheEntry[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | null {\n    const results = this._positionCache.siblings.filter(sibling => {\n      return isInsideClientRect(sibling.clientRect, x, y);\n    });\n\n    // No drop containers are intersecting with the pointer.\n    if (!results.length) {\n      return null;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return null;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    const result = results.find(sibling => {\n      const element = sibling.drop.element.nativeElement;\n      return element === elementFromPoint || element.contains(elementFromPoint);\n    });\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n"],"names":["_this","dropped","emit","previousIndex","event","currentIndex","previousContainer","data","container","item","isPointerOverContainer","CdkDropList","_dropLists","type","Directive","args","selector","exportAs","providers","provide","CdkDropListGroup","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","_draggables","ContentChildren","forwardRef","CdkDrag","connectedTo","Input","orientation","id","lockAxis","disabled","enterPredicate","Output","entered","exited","sorted","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","value","max","Math","min","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getTransform","x","y","round","deepCloneNode","node","clone","cloneNode","removeAttribute","removeElement","parentNode","removeChild","isTouchEvent","startsWith","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DROP_LIST","InjectionToken","activeCapturingEventOptions","normalizePassiveListenerOptions","passive","capture","_ngZone","_document","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventDefaultWhileDragging","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","moveEvent","upEvent","set","handler","e","next","options","forEach","config","_clearGlobalListeners","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","providedIn","NgZone","CDK_DRAG_PARENT","parentDrag","_disabled","_parentDrag","nativeElement","Object","defineProperty","coerceBooleanProperty","templateRef","TemplateRef","passiveEventListenerOptions","activeEventListenerOptions","DragRef","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","dropContainer","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_handles","_nativeInteractionsEnabled","beforeStarted","started","ended","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","targetHandle","handle","contains","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","_removeSubscriptions","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","_toggleNativeDragInteractions","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","withBoundaryElement","boundaryElement","dispose","_destroyPreview","_destroyPlaceholder","_nextSibling","reset","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","Date","now","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","insertBefore","getItemIndex","_a","_isOverContainer","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","CDK_DRAG_CONFIG","factory","_rootElementInitSubscription","EventEmitter","_dragRef","pipe","movedEvent","ref","_dropListRef","_getBoundaryElement","_proxyEvents","ngAfterViewInit","onStable","asObservable","take","_getRootElement","nodeType","ELEMENT_NODE","nodeName","changes","startWith","handleList","filter","rootElementSelector","boundaryElementSelector","[class.cdk-drag-dragging]","ViewContainerRef","ViewportRuler","descendants","ContentChild","_items","_uniqueIdCounter","DropListRef","_isDragging","_positionCache","items","siblings","self","_previousSwap","_siblings","_orientation","_activeSiblings","_activeDraggables","slice","_cachePositions","sibling","_toggleIsReceiving","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","_reset","withItems","withOrientation","reverse","currentItem","isReceiving","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","elementToMeasure","sort","a","b","immediateSibling","end","xThreshold","yThreshold","_","direction","floor","results","elementFromPoint","result","dragDropRegistry","_changeDetectorRef","dir","_group","document","_syncInputs","coerceArray","list","markForCheck"],"mappings":"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"}