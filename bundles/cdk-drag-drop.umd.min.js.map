{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/drag.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drag-handle.ts","../../src/cdk/drag-drop/drop-container.ts","../../src/cdk/drag-drop/drag-preview.ts","../../src/cdk/drag-drop/drag-placeholder.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drop.ts","../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDropContainer, CDK_DROP_CONTAINER} from './drop-container';\nimport {\n  CdkDragStart,\n  CdkDragEnd,\n  CdkDragExit,\n  CdkDragEnter,\n  CdkDragDrop,\n  CdkDragMove,\n} from './drag-events';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {ViewportRuler} from '@angular/cdk/overlay';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Subject, merge, Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Element that can be moved inside a CdkDrop container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '(mousedown)': '_startDragging($event)',\n    '(touchstart)': '_startDragging($event)',\n  }\n})\nexport class CdkDrag<T = any> implements OnDestroy {\n  private _document: Document;\n  private _destroyed = new Subject<void>();\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved = false;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> = Observable.create(observer => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  ngOnDestroy() {\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this._dragDropRegistry.isDragging(this)) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._removeElement(this.element.nativeElement);\n    }\n\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._moveEvents.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts the dragging sequence. */\n  _startDragging(event: MouseEvent | TouchEvent) {\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle) {\n        this._pointerDown(targetHandle.element, event);\n      }\n    } else {\n      this._pointerDown(this.element, event);\n    }\n  }\n\n  /** Handler for when the pointer is pressed down on the element or the handle. */\n  private _pointerDown = (referenceElement: ElementRef<HTMLElement>,\n                          event: MouseEvent | TouchEvent) => {\n\n    const isDragging = this._dragDropRegistry.isDragging(this);\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    const endedOrDestroyed = merge(this.ended, this._destroyed);\n\n    this._dragDropRegistry.pointerMove\n      .pipe(takeUntil(endedOrDestroyed))\n      .subscribe(this._pointerMove);\n\n    this._dragDropRegistry.pointerUp\n      .pipe(takeUntil(endedOrDestroyed))\n      .subscribe(this._pointerUp);\n\n    this._dragDropRegistry.startDragging(this, event);\n    this._initialContainer = this.dropContainer;\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this.dropContainer) {\n      const element = this.element.nativeElement;\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._nextSibling = element.nextSibling;\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    // TODO(crisbeto): this should start dragging after a certain threshold,\n    // otherwise we risk interfering with clicks on the element.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      this._setTransform(this.element.nativeElement, activeTransform.x, activeTransform.y);\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone becaus we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this.element.nativeElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this.element.nativeElement, this._nextSibling);\n    } else {\n      this._placeholder.parentNode!.appendChild(this.element.nativeElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}) {\n    // Drop container that draggable has been moved into.\n    const newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer});\n        this.dropContainer = newContainer;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y);\n    this._setTransform(this._preview,\n                       x - this._pickupPositionInElement.x,\n                       y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this.element.nativeElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = element.cloneNode(true) as HTMLElement;\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      this._setTransform(preview, elementRect.left, elementRect.top);\n    }\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = this.element.nativeElement.cloneNode(true) as HTMLElement;\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: ElementRef<HTMLElement>,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this.element.nativeElement.getBoundingClientRect();\n    const handleElement = referenceElement === this.element ? null : referenceElement.nativeElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const x = this._isTouchEvent(event) ?\n        event.targetTouches[0].pageX - referenceRect.left - this._scrollPosition.left :\n        event.offsetX;\n    const y = this._isTouchEvent(event) ?\n        event.targetTouches[0].pageY - referenceRect.top - this._scrollPosition.top :\n        event.offsetY;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = (event: TransitionEvent) => {\n          if (!event || event.target === this._preview) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Sets the `transform` style on an element.\n   * @param element Element on which to set the transform.\n   * @param x Desired position of the element along the X axis.\n   * @param y Desired position of the element along the Y axis.\n   */\n  private _setTransform(element: HTMLElement, x: number, y: number) {\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transition duration, including the delay, of an element in milliseconds. */\nfunction getTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const rawDuration = computedStyle.getPropertyValue('transition-duration');\n  const rawDelay = computedStyle.getPropertyValue('transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDuration) + parseCssTimeUnitsToMs(rawDelay);\n}\n\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList} from '@angular/core';\nimport {CdkDrag} from './drag';\n\nexport interface CdkDropContainer<T = any> {\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param xOffset Position of the item along the X axis.\n   * @param yOffset Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\n}\n\n/**\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active event. */\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\n// avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {handler: PointerEventHandler, options?: any}>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active, because\n        // newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeEventOptions as any);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\n        .forEach((config, name) => {\n          this._ngZone.runOutsideAngular(() => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` events while the element is being dragged.\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\n   */\n  private _preventScrollListener = (event: TouchEvent) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkDrag} from './drag';\nimport {CdkDragExit, CdkDragEnter, CdkDragDrop} from './drag-events';\nimport {CDK_DROP_CONTAINER} from './drop-container';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {moveItemInArray} from './drag-utils';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/** Container that wraps a set of draggable items. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-drop',\n  exportAs: 'cdkDrop',\n  template: '<ng-content></ng-content>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['drop.css'],\n  providers: [\n    {provide: CDK_DROP_CONTAINER, useExisting: CdkDrop},\n  ],\n  host: {\n    'class': 'cdk-drop',\n    '[id]': 'id',\n    '[class.cdk-drop-dragging]': '_dragging'\n  }\n})\nexport class CdkDrop<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input() connectedTo: (CdkDrop | string)[] = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input() data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDrop`.\n   */\n  @Input() id: string = `cdk-drop-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input() lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input() enterPredicate: (drag?: CdkDrag, drop?: CdkDrop) => boolean = () => true;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output() dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output() entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output() exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDrop<T>>) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache = {\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\n    siblings: [] as {drop: CdkDrop, clientRect: ClientRect}[]\n  };\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDrop): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param xOffset Position of the item along the X axis.\n   * @param yOffset Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, xOffset: number, yOffset: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.element.nativeElement;\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dragging ?\n        this._positionCache.items.findIndex(currentItem => currentItem.drag === item) :\n        this._draggables.toArray().indexOf(item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param xOffset Position of the item along the X axis.\n   * @param yOffset Position of the item along the Y axis.\n   */\n  _sortItem(item: CdkDrag, xOffset: number, yOffset: number): void {\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, xOffset, yOffset);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblings[newIndex].clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                      newPosition.top - currentPosition.top;\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = isHorizontal ? currentPosition.width * delta :\n                                         currentPosition.height * delta;\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.element.nativeElement;\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        elementToOffset.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${sibling.offset}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDrop | null {\n    const result = this._positionCache.siblings.find(({clientRect}) => {\n      const {top, bottom, left, right} = clientRect;\n      return y >= top && y <= bottom && x >= left && x <= right;\n    });\n\n    return result && result.drop.enterPredicate(item, this) ? result.drop : null;\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.element.nativeElement;\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => a.clientRect.top - b.clientRect.top);\n\n    this._positionCache.siblings = this.connectedTo\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\n      .filter(drop => drop && drop !== this)\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.element.nativeElement.style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param xOffset Position of the user's pointer along the X axis.\n   * @param yOffset Position of the user's pointer along the Y axis.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, xOffset: number, yOffset: number) {\n    return this._positionCache.items.findIndex(({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      return this.orientation === 'horizontal' ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the mouse coordinates are rounded to pixels.\n          xOffset >= Math.floor(clientRect.left) && xOffset <= Math.floor(clientRect.right) :\n          yOffset >= Math.floor(clientRect.top) && yOffset <= Math.floor(clientRect.bottom);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDrop} from './drop';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"],"names":["parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransitionDurationInMs","element","computedStyle","getComputedStyle","rawDuration","getPropertyValue","rawDelay","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","max","Math","min","CdkDragHandle","this","type","Directive","args","selector","host","class","ElementRef","CDK_DROP_CONTAINER","InjectionToken","CdkDragPreview","templateRef","TemplateRef","data","Input","CdkDragPlaceholder","activeEventOptions","supportsPassiveEventListeners","passive","DragDropRegistry","_ngZone","_document","_this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","startsWith","moveEvent","upEvent","set","handler","e","next","options","forEach","config","name","_clearGlobalListeners","isDragging","Array","find","instance","ngOnDestroy","complete","clear","Injectable","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_dir","_destroyed","_passiveTransform","x","y","_activeTransform","_hasMoved","_moveEvents","_moveEventSubscriptions","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","referenceElement","_isTouchEvent","button","endedOrDestroyed","merge","pipe","takeUntil","_pointerMove","_pointerUp","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","_pickupPositionOnPage","_getPointerPositionOnPage","emit","source","nativeElement","preview","_preview","_createPreviewElement","placeholder","_placeholder","_createPlaceholderElement","style","display","_nextSibling","nextSibling","body","appendChild","replaceChild","start","pointerPosition","_getConstrainedPointerPosition","_updateActiveDropContainer","activeTransform","_setTransform","run","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","getPlaceholderElement","_destroyPreview","_destroyPlaceholder","_removeElement","_startDragging","_handles","targetHandle","handle","contains","insertBefore","getItemIndex","item","previousIndex","container","previousContainer","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","cloneNode","width","height","left","top","classList","setAttribute","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","targetTouches","pageX","offsetX","pageY","offsetY","Promise","resolve","placeholderRect","duration","clearTimeout","timeout","setTimeout","transform","parentNode","removeChild","point","touches","dropContainerLock","lockAxis","destroy","exportAs","(mousedown)","(touchstart)","Optional","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","ContentChild","Output","_uniqueIdCounter","CdkDrop","connectedTo","orientation","enterPredicate","_dragging","_positionCache","items","siblings","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","_reset","xOffset","yOffset","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","findIndex","currentItem","isHorizontal","currentPosition","clientRect","newPosition","itemOffset","siblingOffset","oldOrder","slice","sibling","index","isDraggedItem","offset","elementToOffset","_adjustClientRect","result","bottom","right","map","elementToMeasure","sort","a","b","filter","_","floor","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","providers","provide","useExisting","[id]","[class.cdk-drop-dragging]","propDecorators","NgModule","declarations","exports","DragDropModule"],"mappings":"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"}