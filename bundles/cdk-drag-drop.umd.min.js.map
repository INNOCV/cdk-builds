{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/drag-handle.ts","../../src/cdk/drag-drop/drag-placeholder.ts","../../src/cdk/drag-drop/drag-preview.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from './drop-list-container';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {CDK_DRAG_PARENT} from './drag-parent';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<CdkDragConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_hasStartedDragging && _isDragging()',\n  },\n  providers: [{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropListContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the stream that initializes the root element. */\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._moveEvents.subscribe(observer);\n        this._moveEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._moveEventSubscriptions--;\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST_CONTAINER) @Optional() @SkipSelf()\n    public dropContainer: CdkDropListContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropListContainer>,\n    @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const rootElement = this._rootElement = this._getRootElement();\n        rootElement.addEventListener('mousedown', this._pointerDown, passiveEventListenerOptions);\n        rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        this._handles.changes.pipe(startWith(null)).subscribe(() =>\n            toggleNativeDragInteractions(rootElement, this.getChildHandles().length > 0));\n      });\n  }\n\n  ngOnDestroy() {\n    // The directive might have been destroyed before the root element is initialized.\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown,\n          passiveEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown,\n          passiveEventListenerOptions);\n\n      // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n      if (this._isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        this._removeElement(this._rootElement);\n      }\n    }\n\n    this._rootElementInitSubscription.unsubscribe();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this._moveEvents.complete();\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Gets only handles that are not inside descendant `CdkDrag` instances. */\n  private getChildHandles() {\n    return this._handles.filter(handle => handle._parentDrag === this);\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    const handles = this.getChildHandles();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (handles.length) {\n      const targetHandle = handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence() {\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence());\n      }\n\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's allowed to return into its original container.\n    // This handles the case where two containers are connected one way and the user tries to\n    // undo dragging an item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._canReturnItem(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = element.cloneNode(true) as HTMLElement;\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = this._rootElement.cloneNode(true) as HTMLElement;\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = this._isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      const selector = this.rootElementSelector;\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            (currentElement as any).msMatchesSelector(selector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  return `translate3d(${x}px, ${y}px, 0)`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_LIST_CONTAINER} from './drop-list-container';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Object used to cache the position of a drag list, its items. and siblings.\n * @docs-private\n */\ninterface PositionCache {\n  /** Cached positions of the items in the list. */\n  items: ItemPositionCacheEntry[];\n  /** Cached positions of the connected lists. */\n  siblings: ListPositionCacheEntry[];\n  /** Dimensions of the list itself. */\n  self: ClientRect;\n}\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface ItemPositionCacheEntry {\n  /** Instance of the drag item. */\n  drag: CdkDrag;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Entry in the position cache for drop lists.\n * @docs-private\n */\ninterface ListPositionCacheEntry {\n  /** Instance of the drop list. */\n  drop: CdkDropList;\n  /** Dimensions of the list. */\n  clientRect: ClientRect;\n}\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dragging'\n  }\n})\nexport class CdkDropList<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDropList<T>>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache: PositionCache = {items: [], siblings: [], self: {} as ClientRect};\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDropList): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    if (!this._dragging) {\n      return this._draggables.toArray().indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        elementToOffset.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${sibling.offset}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropList | null {\n    const result = this._positionCache.siblings\n        .find(sibling => isInsideClientRect(sibling.clientRect, x, y));\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n  /**\n   * Checks whether an item that started in this container can be returned to it,\n   * after it was moved out into another container.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReturnItem(x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y);\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = coerceArray(this.connectedTo)\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\n      .filter(drop => drop && drop !== this)\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: ItemPositionCacheEntry[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup' | 'wheel', {\n    handler: PointerEventHandler,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We need to disable the native interactions on the entire body, because\n      // the user can start marking text if they drag too far in Safari.\n      toggleNativeDragInteractions(this._document.body, false);\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventScrollListener,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n      toggleNativeDragInteractions(this._document.body, true);\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` and `wheel` events while the element is being dragged.\n   */\n  private _preventScrollListener = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional} from '@angular/core';\nimport {CDK_DRAG_PARENT} from './drag-parent';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropListContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _canReturnItem(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST_CONTAINER =\n    new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './drop-list';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"],"names":["extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getTransform","x","y","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","copyArrayItem","max","Math","min","findIndex","predicate","isInsideClientRect","clientRect","top","bottom","left","right","activeCapturingEventOptions","normalizePassiveListenerOptions","passive","capture","DragDropRegistry","_ngZone","_document","_this","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","type","startsWith","moveEvent","upEvent","body","set","handler","e","next","options","forEach","config","_clearGlobalListeners","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","args","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_parentDrag","nativeElement","Directive","selector","host","class","ElementRef","Optional","CdkDragPlaceholder","templateRef","TemplateRef","data","Input","CdkDragPreview","CDK_DROP_LIST_CONTAINER","CDK_DRAG_CONFIG","factory","passiveEventListenerOptions","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","handles","getChildHandles","targetHandle","handle","contains","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getConstrainedPointerPosition","_hasStartedDragging","abs","_pickupPositionOnPage","run","_startDragSequence","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","transform","_initialTransform","_pointerDirectionDelta","_pointerUp","_isDragging","_removeSubscriptions","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","emit","getPlaceholderElement","_placeholder","getRootElement","ngAfterViewInit","onStable","asObservable","pipe","take","rootElement","_getRootElement","_handles","changes","startWith","_removeElement","_destroyPreview","_destroyPlaceholder","_nextSibling","filter","referenceElement","stopPropagation","_isTouchEvent","button","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","_getPointerPositionOnPage","_pointerPositionAtLastDirectionChange","nextSibling","preview","_preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","appendChild","replaceChild","start","insertBefore","getItemIndex","item","previousIndex","container","previousContainer","_a","newContainer","_getSiblingContainerFromPosition","_canReturnItem","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","cloneNode","width","height","position","zIndex","classList","setAttribute","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","point","targetTouches","pageX","pageY","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","parentNode","removeChild","touches","dropContainerLock","lockAxis","destroy","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","rootElementSelector","currentElement","matches","msMatchesSelector","parentElement","exportAs","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","descendants","ContentChild","Output","_uniqueIdCounter","CdkDropList","_changeDetectorRef","connectedTo","orientation","enterPredicate","_dragging","_positionCache","items","siblings","self","_previousSwap","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","markForCheck","_reset","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","slice","reverse","currentItem","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","index","isDraggedItem","offset","elementToOffset","_adjustClientRect","result","elementToMeasure","sort","a","b","coerceArray","_","direction","floor","xThreshold","yThreshold","immediateSibling","end","[id]","[class.cdk-drop-list-dragging]","ChangeDetectorRef","forwardRef","NgModule","declarations","exports","DragDropModule"],"mappings":"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"}