{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  AfterContentInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    /** Element that the drop list is attached to. */\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    @Optional() @Inject(DOCUMENT) _document?: any,\n\n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n    // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold && (Date.now() >= this._dragStartTime + (this.dragStartDelay || 0))) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop,\n    private _changeDetectorRef?: ChangeDetectorRef) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = this.dragStartDelay;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n"],"names":["disabled","type","Input","args","CdkDropListGroup","_uniqueIdCounter","CdkDropList","element","dragDropRegistry","_changeDetectorRef","_dir","_group","_document","dragDrop","_this","this","_destroyed","Subject","connectedTo","orientation","id","_disabled","enterPredicate","dropped","EventEmitter","entered","exited","sorted","_dropListRef","createDropList","DropListRef","document","data","drag","drop","_syncInputs","_handleEvents","_dropLists","push","_items","add","Object","defineProperty","prototype","value","coerceBooleanProperty","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","subscribe","items","withItems","map","_dragRef","ngOnDestroy","index","indexOf","splice","delete","dispose","next","complete","start","item","currentIndex","previousContainer","isPointerOverContainer","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","ref","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","lockAxis","filter","withOrientation","markForCheck","event","emit","container","previousIndex","Directive","selector","exportAs","providers","provide","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","DragDrop","ContentChildren","forwardRef","CdkDrag","descendants","Output","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","removeAttribute","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","startsWith","moveItemInArray","array","fromIndex","toIndex","from","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","started","released","ended","moved","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","Date","now","_dragStartTime","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","withBoundaryElement","boundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","clear","_nextSibling","reset","disableHandle","enableHandle","direction","_withDropContainer","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_activeDraggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","newPositionReference","_reset","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","NgZone","DEFAULT_CONFIG","createDrag","ViewportRuler","CDK_DROP_LIST","InjectionToken","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","CDK_DRAG_CONFIG","factory","dropContainer","_viewContainerRef","viewportRuler","movedEvent","ngAfterViewInit","onStable","asObservable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","firstChange","rootElementSelector","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundaryElementSelector","dir","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","ViewContainerRef","ContentChild"],"mappings":"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"}