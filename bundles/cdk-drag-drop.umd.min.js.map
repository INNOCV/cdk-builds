{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-handle.ts","../../src/cdk/drag-drop/drag-placeholder.ts","../../src/cdk/drag-drop/drag-preview.ts","../../src/cdk/drag-drop/drop-container.ts","../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_CONTAINER, CdkDropContainer} from './drop-container';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<CdkDragConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDrop container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_hasStartedDragging && _isDragging()',\n  }\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._moveEvents.subscribe(observer);\n        this._moveEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._moveEventSubscriptions--;\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_CONTAINER) @Optional() @SkipSelf() public dropContainer: CdkDropContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropContainer>,\n    @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      rootElement.addEventListener('mousedown', this._pointerDown);\n      rootElement.addEventListener('touchstart', this._pointerDown);\n    });\n  }\n\n  ngOnDestroy() {\n    this._rootElement.removeEventListener('mousedown', this._pointerDown);\n    this._rootElement.removeEventListener('touchstart', this._pointerDown);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this._isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._removeElement(this._rootElement);\n    }\n\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this._moveEvents.complete();\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    const isDragging = this._isDragging();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence() {\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const minimumDistance = this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= minimumDistance) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence());\n      }\n\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      this._setTransform(this._rootElement, activeTransform.x, activeTransform.y);\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => this._cleanupDragArtifacts());\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's allowed to return into its original container.\n    // This handles the case where two containers are connected one way and the user tries to\n    // undo dragging an item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._canReturnItem(this, x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._setTransform(this._preview,\n                       x - this._pickupPositionInElement.x,\n                       y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      this._setTransform(preview, this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = element.cloneNode(true) as HTMLElement;\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      this._setTransform(preview, elementRect.left, elementRect.top);\n    }\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = this._rootElement.cloneNode(true) as HTMLElement;\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = this._isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._setTransform(this._preview, placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Sets the `transform` style on an element.\n   * @param element Element on which to set the transform.\n   * @param x Desired position of the element along the X axis.\n   * @param y Desired position of the element along the Y axis.\n   */\n  private _setTransform(element: HTMLElement, x: number, y: number) {\n    element.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      const selector = this.rootElementSelector;\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            (currentElement as any).msMatchesSelector(selector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  Optional,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_CONTAINER} from './drop-container';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/** Container that wraps a set of draggable items. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-drop',\n  exportAs: 'cdkDrop',\n  template: '<ng-content></ng-content>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['drop.css'],\n  providers: [\n    {provide: CDK_DROP_CONTAINER, useExisting: CdkDrop},\n  ],\n  host: {\n    'class': 'cdk-drop',\n    '[id]': 'id',\n    '[class.cdk-drop-dragging]': '_dragging'\n  }\n})\nexport class CdkDrop<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input() connectedTo: (CdkDrop | string)[] | CdkDrop | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input() data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDrop`.\n   */\n  @Input() id: string = `cdk-drop-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input() lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input() enterPredicate: (drag?: CdkDrag, drop?: CdkDrop) => boolean = () => true;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output() dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output() entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output() exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDrop<T>>,\n    @Optional() private _dir?: Directionality) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache = {\n    items: [] as {drag: CdkDrag, clientRect: ClientRect, offset: number}[],\n    siblings: [] as {drop: CdkDrop, clientRect: ClientRect}[],\n    self: {} as ClientRect\n  };\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDrop): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    if (!this._dragging) {\n      return this._draggables.toArray().indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                      newPosition.top - currentPosition.top;\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = isHorizontal ? currentPosition.width * delta :\n                                         currentPosition.height * delta;\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        elementToOffset.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${sibling.offset}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDrop | null {\n    const result = this._positionCache.siblings\n        .find(sibling => isInsideClientRect(sibling.clientRect, x, y));\n\n    return result && result.drop.enterPredicate(item, this) ? result.drop : null;\n  }\n\n  /**\n   * Checks whether an item that started in this container can be returned to it,\n   * after it was moved out into another container.\n   * @param item Item that is being checked.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReturnItem(item: CdkDrag, x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y) && this.enterPredicate(item, this);\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = coerceArray(this.connectedTo)\n      .map(drop => typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop)\n      .filter(drop => drop && drop !== this)\n      .map(drop => ({drop, clientRect: drop.element.nativeElement.getBoundingClientRect()}));\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active event. */\nconst activeEventOptions = supportsPassiveEventListeners() ? {passive: false} : false;\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDrop directly, in order to\n// avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup', {\n    handler: PointerEventHandler,\n    options?: any\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active, because\n        // newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeEventOptions as any);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We need to disable the native interactions on the entire body, because\n      // the user can start marking text if they drag too far in Safari.\n      this._document.body.classList.add('cdk-drag-drop-disable-native-interactions');\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {handler: e => this.pointerMove.next(e), options: activeEventOptions})\n        .set(upEvent, {handler: e => this.pointerUp.next(e)})\n        .forEach((config, name) => {\n          this._ngZone.runOutsideAngular(() => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n      this._document.body.classList.remove('cdk-drag-drop-disable-native-interactions');\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` events while the element is being dragged.\n   * This gets bound once, ahead of time, because WebKit won't preventDefault on a\n   * dynamically-added `touchmove` listener. See https://bugs.webkit.org/show_bug.cgi?id=184250.\n   */\n  private _preventScrollListener = (event: TouchEvent) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropContainer | null;\n  _canReturnItem(item: CdkDrag, x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDrop instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_CONTAINER = new InjectionToken<CdkDropContainer>('CDK_DROP_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDrop} from './drop';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDrop,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n"],"names":["parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","element","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","moveItemInArray","array","fromIndex","toIndex","from","clamp","length","to","target","delta","i","transferArrayItem","currentArray","targetArray","currentIndex","targetIndex","splice","max","Math","min","predicate","y","top","bottom","x","left","right","activeEventOptions","supportsPassiveEventListeners","passive","DragDropRegistry","_ngZone","_document","_this","this","_dropInstances","Set","_dragInstances","_activeDragInstances","_globalListeners","Map","pointerMove","Subject","pointerUp","_preventScrollListener","event","size","preventDefault","prototype","registerDropContainer","drop","has","getDropContainer","id","Error","add","registerDragItem","drag","runOutsideAngular","addEventListener","removeDropContainer","delete","removeDragItem","stopDragging","removeEventListener","startDragging","isTouchEvent","type","startsWith","moveEvent","upEvent","body","classList","set","handler","e","next","options","forEach","config","_clearGlobalListeners","remove","isDragging","Array","instance","ngOnDestroy","complete","clear","Injectable","args","providedIn","NgZone","undefined","decorators","Inject","DOCUMENT","CdkDragHandle","Directive","selector","host","class","ElementRef","CdkDragPlaceholder","templateRef","TemplateRef","data","Input","CdkDragPreview","CDK_DROP_CONTAINER","InjectionToken","CDK_DRAG_CONFIG","factory","CdkDrag","dropContainer","document","_viewContainerRef","_viewportRuler","_dragDropRegistry","_config","_dir","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","started","EventEmitter","ended","entered","exited","dropped","moved","Observable","create","observer","subscription","subscribe","unsubscribe","_pointerDown","_handles","targetHandle","handle","nativeElement","contains","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getConstrainedPointerPosition","_hasStartedDragging","abs","_pickupPositionOnPage","run","_startDragSequence","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_setTransform","source","_pointerDirectionDelta","_pointerUp","_isDragging","_removeSubscriptions","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","emit","getPlaceholderElement","_placeholder","getRootElement","ngAfterViewInit","onStable","asObservable","pipe","take","rootElement","_getRootElement","_destroyPreview","_destroyPlaceholder","_removeElement","_nextSibling","referenceElement","_isTouchEvent","button","_initialContainer","_scrollPosition","getViewportScrollPosition","_pickupPositionInElement","_previewTemplate","_getPointerPositionInElement","_getPointerPositionOnPage","_pointerPositionAtLastDirectionChange","nextSibling","preview","_preview","_createPreviewElement","placeholder","_createPlaceholderElement","style","display","appendChild","replaceChild","start","insertBefore","getItemIndex","item","previousIndex","container","previousContainer","_a","newContainer","_getSiblingContainerFromPosition","_canReturnItem","exit","enter","_sortItem","viewRef","createEmbeddedView","rootNodes","_previewRef","elementRect","getBoundingClientRect","cloneNode","width","height","setAttribute","_placeholderTemplate","_placeholderRef","handleElement","referenceRect","point","targetTouches","pageX","pageY","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","transform","parentNode","removeChild","touches","dropContainerLock","lockAxis","destroy","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","rootElementSelector","currentElement","matches","msMatchesSelector","parentElement","exportAs","[class.cdk-drag-dragging]","Optional","SkipSelf","ViewContainerRef","ViewportRuler","Directionality","ContentChildren","ContentChild","Output","_uniqueIdCounter","CdkDrop","connectedTo","orientation","enterPredicate","_dragging","_positionCache","items","siblings","self","_previousSwap","ngOnInit","_activeDraggables","_draggables","toArray","_cachePositions","_reset","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","newPositionReference","push","findIndex","slice","reverse","currentItem","pointerDelta","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","clientRect","newPosition","itemOffset","siblingOffset","oldOrder","sibling","index","isDraggedItem","offset","elementToOffset","_adjustClientRect","result","isInsideClientRect","elementToMeasure","sort","a","b","coerceArray","filter","_","direction","floor","xThreshold","yThreshold","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","providers","provide","useExisting","[id]","[class.cdk-drop-dragging]","propDecorators","NgModule","declarations","exports","DragDropModule"],"mappings":"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"}