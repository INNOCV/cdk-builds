{"version":3,"file":"cdk-layout.umd.min.js","sources":["../../src/cdk/layout/media-matcher.ts","../../src/cdk/layout/breakpoints-observer.ts","../../src/cdk/layout/breakpoints.ts","../../src/cdk/layout/public_api.ts","../../src/cdk/layout/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Global registry for all dynamically-created, injected style tags.\n */\nconst styleElementForWebkitCompatibility: Map<string, HTMLStyleElement> = new Map();\n/**\n * A utility for calling matchMedia queries.\n */\nexport class MediaMatcher {\n/**\n * The internal matchMedia method to return back a MediaQueryList like object.\n */\nprivate _matchMedia: (query: string) => MediaQueryList;\n/**\n * @param {?} platform\n */\nconstructor(private platform: Platform) {\n    this._matchMedia = this.platform.isBrowser ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n/**\n * Confirms the layout engine will trigger for the selector query provided and returns the\n * MediaQueryList for the query provided.\n * @param {?} query\n * @return {?}\n */\nmatchMedia(query: string): MediaQueryList {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction MediaMatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nMediaMatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMediaMatcher.ctorParameters;\n/**\n * The internal matchMedia method to return back a MediaQueryList like object.\n * @type {?}\n */\nMediaMatcher.prototype._matchMedia;\n/** @type {?} */\nMediaMatcher.prototype.platform;\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when there is at least one CSS\n * selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query: string) {\n  if (!styleElementForWebkitCompatibility.has(query)) {\n    try {\n      const /** @type {?} */ style = document.createElement('style');\n\n      style.setAttribute('type', 'text/css');\n      if (!style.sheet) {\n        const /** @type {?} */ cssText = `@media ${query} {.fx-query-test{ }}`;\n        style.appendChild(document.createTextNode(cssText));\n      }\n\n      document.getElementsByTagName('head')[0].appendChild(style);\n\n      // Store in private global registry\n      styleElementForWebkitCompatibility.set(query, style);\n    } catch ( /** @type {?} */e) {\n      console.error(e);\n    }\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {MediaMatcher} from './media-matcher';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, map, startWith, takeUntil} from '@angular/cdk/rxjs';\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {fromEventPattern} from 'rxjs/observable/fromEventPattern';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  matches: boolean;\n}\n\ninterface Query {\n  observable: Observable<BreakpointState>;\n  mql: MediaQueryList;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nexport class BreakpointObserver implements OnDestroy {\n/**\n * A map of all media queries currently being listened for.\n */\nprivate _queries: Map<string, Query> = new Map();\n/**\n * A subject for all other observables to takeUntil based on.\n */\nprivate _destroySubject: Subject<{}> = new Subject();\n/**\n * @param {?} mediaMatcher\n * @param {?} zone\n */\nconstructor(private mediaMatcher: MediaMatcher,\nprivate zone: NgZone) {}\n/**\n * Completes the active subject, signalling to all other observables to complete.\n * @return {?}\n */\nngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n/**\n * Whether the query currently is matched.\n * @param {?} value\n * @return {?}\n */\nisMatched(value: string | string[]): boolean {\n    let /** @type {?} */ queries = coerceArray(value);\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n/**\n * Gets an observable of results for the given queries that will emit new results for any changes\n * in matching of the given queries.\n * @param {?} value\n * @return {?}\n */\nobserve(value: string | string[]): Observable<BreakpointState> {\n    let /** @type {?} */ queries = coerceArray(value);\n    let /** @type {?} */ observables = queries.map(query => this._registerQuery(query).observable);\n\n    return combineLatest(observables, (a: BreakpointState, b: BreakpointState) => {\n      return {\n        matches: !!((a && a.matches) || (b && b.matches)),\n      };\n    });\n  }\n/**\n * Registers a specific query to be listened for.\n * @param {?} query\n * @return {?}\n */\nprivate _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return /** @type {?} */(( this._queries.get(query)));\n    }\n\n    let /** @type {?} */ mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    let /** @type {?} */ queryObservable = RxChain.from(fromEventPattern(\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      (listener: MediaQueryListListener) => {\n        mql.addListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      },\n      (listener: MediaQueryListListener) => {\n        mql.removeListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      }))\n      .call(takeUntil, this._destroySubject)\n      .call(startWith, mql)\n      .call(map, (nextMql: MediaQueryList) => ({matches: nextMql.matches}))\n      .result();\n\n    // Add the MediaQueryList to the set of queries.\n    let /** @type {?} */ output = {observable: queryObservable, mql: mql};\n    this._queries.set(query, output);\n    return output;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MediaMatcher, },\n{type: NgZone, },\n];\n}\n\nfunction BreakpointObserver_tsickle_Closure_declarations() {\n/** @type {?} */\nBreakpointObserver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreakpointObserver.ctorParameters;\n/**\n * A map of all media queries currently being listened for.\n * @type {?}\n */\nBreakpointObserver.prototype._queries;\n/**\n * A subject for all other observables to takeUntil based on.\n * @type {?}\n */\nBreakpointObserver.prototype._destroySubject;\n/** @type {?} */\nBreakpointObserver.prototype.mediaMatcher;\n/** @type {?} */\nBreakpointObserver.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const /** @type {?} */ Breakpoints = {\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {BreakpointObserver} from './breakpoints-observer';\nimport {MediaMatcher} from './media-matcher';\nexport class LayoutModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [BreakpointObserver, MediaMatcher],\n  imports: [PlatformModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LayoutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLayoutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLayoutModule.ctorParameters;\n}\n\n\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nexport {Breakpoints} from './breakpoints';\nexport {MediaMatcher} from './media-matcher';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LayoutModule,BreakpointObserver,BreakpointState,Breakpoints,MediaMatcher} from './public_api';\n"],"names":["createEmptyStyleRule","query","styleElementForWebkitCompatibility","has","style","document","createElement","setAttribute","sheet","cssText","appendChild","createTextNode","getElementsByTagName","set","e","console","error","noopMatchMedia","matches","media","addListener","removeListener","this","platform","_matchMedia","isBrowser","WEBKIT","MediaMatcher","decorators","type","Injectable","ctorParameters","Platform","mediaMatcher","zone","_destroySubject","next","complete","_this","coerceArray","value","some","mediaQuery","_registerQuery","mql","BreakpointObserver","prototype","observe","queries","observables","map","observable","combineLatest","a","b","_queries","get","matchMedia","listener","run","call","takeUntil","startWith","result","output","queryObservable","NgZone","Breakpoints","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","LayoutModule","NgModule","args"],"mappings":";;;;;;;gvBA8EA,SAAAA,GAxBCC,GAyBC,IA/BKC,EAAmCC,IAAIF,GAgC1C,IACE,GAANG,GAAAC,SAAAC,cAAA,QAGM,IARJF,EAxBUG,aAAa,OAAQ,aACtBH,EAAMI,MAAO,CAgChB,GAARC,GAAA,UA/BwBR,EA+BxB,sBACQG,GA/BMM,YAAYL,SAASM,eAAeF,IAkC5CJ,SA/BSO,qBAAqB,QAAQ,GAAGF,YAAYN,GAkCrDF,EA/BmCW,IAAIZ,EAAOG,GAC9C,MAAAU,GAgCAC,QA/BQC,MAAMF,IAwCpB,QAAAG,GA3BChB,GA4BC,OACEiB,QAlCmB,QAAVjB,GAA6B,KAAVA,EAmC5BkB,MAlCOlB,EAmCPmB,YAlCa,aAmCbC,eAlCgB,uDAjDpBC,KAAAC,SAFgCA,EAAVD,KAAtBE,YAAAF,KAAsBC,SAAtBE,yCAMMR,EAcN,0CAFA,MAHAK,MAAAC,SAAAG,QACQ1B,EAARC,GAEAqB,KAAAE,YAAAvB,IAEA0B,IAFOA,GAAPC,aACEC,KAAMC,EAGRA,aAACH,EAADI,eAAC,WAAD,QAMCF,KAAMG,EAAPA,6CCTAV,KAAAW,aANoCA,EAAdX,KAAtBY,KAAAA,2DA6EA,0CAjEAZ,KAAAa,gBAAAC,OACId,KATKa,gBAAgBE,8CAiBzB,GAAAC,GAAAhB,IAEI,OAbciB,GAYlBA,YAZ8BC,GACXC,KAAK,SAACC,GAYzB,MAAAJ,GAAAK,eAAAD,GAAAE,IAAA1B,WAQA2B,EAAAC,UAAAC,QAAA,SAAAP,GACI,GAAJF,GAAAhB,KAZQ0B,EAaRT,EAAAA,YAb8BC,GAELS,EAAaD,EAatCE,IAAA,SAAAjD,GAAA,MAAAqC,GAAAK,eAAA1C,GAAAkD,YACA,OAAAC,GAAAA,cAAAH,EAAA,SAAAI,EAAAC,GACA,OACApC,WAAAmC,GAAAA,EAAAnC,SAAAoC,GAAAA,EAAApC,oDAUI,GAAIoB,GAARhB,IAEA,IAAAA,KAAAiC,SAAApD,IAAAF,GAEA,MAAAqB,MAAAiC,SAhB8BC,IAAAvD,EAkB1B,IAhBI2C,GAgBRtB,KAAAW,aAAAwB,WAAAxD,uCAQA,SAAAyD,GAEQd,EAhBIxB,YAgBZ,SAhBkDN,GAAK,MAgBvDwB,GAAAJ,KAAAyB,IAAA,WAAA,MAAAD,GAAA5C,QAfS,SAgBT4C,GACAd,EAAAvB,eAAA,SAAAP,GAAA,MAAAwB,GAAAJ,KAAAyB,IAAA,WAAA,MAAAD,GAAA5C,UANE8C,KARUC,EAQZA,UAAAvC,KAAAa,iBASOyB,KAAPE,EAAAA,UAAAlB,sDAGAmB,SAEAC,GAAAb,WAAAc,EAAArB,IAAAA,SACAtB,MAAAiC,SAAA1C,IAAAZ,EAAA+D,MAEAnB,wCAQAA,EAAAd,eAAA,WAAA,iBClHAF,KAAAqC,EAAAA,SAIA,IAAAC,IACEC,QAAF,kGAEEC,OAAF,iJAGEC,IAAF,mGAEEC,gBAAF,iDAEEC,eAAgB,wEAChBC,YAAF,iDACEC,iBAAF,kDACAC,gBAAA,wJCXA,QAAAC,MACA,MAAAA,KAEAA,GAAChD,aACDC,KAAAgD,EAAAA,SAAAC,sDCfAF,EAAA7C,eAAA,WAAA"}