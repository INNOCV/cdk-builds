{"version":3,"file":"cdk-text-field.umd.min.js","sources":["../../src/cdk/text-field/autofill.ts","../../src/cdk/text-field/autosize.ts","../../src/cdk/text-field/text-field-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'cdk-text-field-autofill-start') {\n        element.classList.add('cdk-text-field-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'cdk-text-field-autofill-end') {\n        element.classList.remove('cdk-text-field-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('cdk-text-field-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {AutofillMonitor, CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n  providers: [AutofillMonitor],\n})\nexport class TextFieldModule {}\n"],"names":["listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_platform","this","_monitoredElements","Map","prototype","monitor","element","isBrowser","observableEmpty","info","get","subject","asObservable","result","Subject","listener","event","animationName","classList","add","next","target","isAutofilled","remove","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","_this","forEach","_info","type","Injectable","Platform","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","ngOnInit","nativeElement","subscribe","emit","Directive","args","selector","ElementRef","Output","CdkTextareaAutosize","_ngZone","_destroyed","Object","defineProperty","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","ngAfterViewInit","resizeToFitContent","runOutsideAngular","fromEvent","window","pipe","auditTime","takeUntil","property","style","_cacheTextareaLineHeight","textarea","textareaClone","cloneNode","rows","position","visibility","border","padding","height","overflow","appendChild","clientHeight","removeChild","ngDoCheck","force","_previousValue","placeholderText","placeholder","scrollHeight","_noopInputHandler","exportAs","host","class","(input)","NgZone","Input","NgModule","declarations","imports","PlatformModule","exports","providers","TextFieldModule"],"mappings":"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"}