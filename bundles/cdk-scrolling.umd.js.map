{"version":3,"file":"cdk-scrolling.umd.js","sources":["../../src/cdk/scrolling/index.ts","../../src/cdk/scrolling/public_api.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scroll-dispatcher.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ScrollDispatchModule,DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER,Scrollable,DEFAULT_RESIZE_TIME,ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '@angular/cdk/platform';\nexport class ScrollDispatchModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\nexport {DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nexport {Scrollable} from './scrollable';\nexport {DEFAULT_RESIZE_TIME,ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './viewport-ruler';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf, NgZone, OnDestroy} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {Observable} from 'rxjs/Observable';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from 'rxjs/operator/auditTime';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of as observableOf} from 'rxjs/observable/of';\n/**\n * Time in ms to throttle the resize events by default.\n */\nexport const DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler implements OnDestroy {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * Stream of viewport change events.\n */\nprivate _change: Observable<Event>;\n/**\n * Subscriptions to streams that invalidate the cached viewport dimensions.\n */\nprivate _invalidateCacheSubscriptions: Subscription[];\n/**\n * @param {?} platform\n * @param {?} ngZone\n * @param {?} scrollDispatcher\n */\nconstructor(platform: Platform, ngZone: NgZone, scrollDispatcher: ScrollDispatcher) {\n    this._change = platform.isBrowser ? ngZone.runOutsideAngular(() => {\n      return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n    }) : observableOf();\n\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    this._invalidateCacheSubscriptions = [\n      scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry()),\n      this.change().subscribe(() => this._cacheViewportGeometry())\n    ];\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._invalidateCacheSubscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\n                 document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Returns a stream that emits whenever the size of the viewport changes.\n * @param {?=} throttleTime\n * @return {?}\n */\nchange(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<string> {\n    return throttleTime > 0 ? auditTime.call(this._change, throttleTime) : this._change;\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: NgZone, },\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n/**\n * Stream of viewport change events.\n * @type {?}\n */\nViewportRuler.prototype._change;\n/**\n * Subscriptions to streams that invalidate the cached viewport dimensions.\n * @type {?}\n */\nViewportRuler.prototype._invalidateCacheSubscriptions;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(platform, ngZone, scrollDispatcher);\n}\n/**\n * \\@docs-private\n */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone, ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operator/auditTime';\nimport {Scrollable} from './scrollable';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return fromEvent(window.document, 'scroll').subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["PlatformModule","Optional","SkipSelf","Platform","NgZone","Injectable","auditTime","of","merge","fromEvent"],"mappings":"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"}