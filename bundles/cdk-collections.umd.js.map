{"version":3,"file":"cdk-collections.umd.js","sources":["../../src/cdk/collections/selection.ts","../../src/cdk/collections/data-source.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {...?} values\n * @return {?}\n */\nselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {...?} values\n * @return {?}\n */\ndeselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n/**\n * Verifies the value assignment and throws an error if the specified value array is\n * including multiple values while the selection model is not supporting multiple values.\n * @param {?} values\n * @return {?}\n */\nprivate _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._isMulti) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MatSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @return {?}\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {CollectionViewer} from './collection-viewer';\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * Connects a collection viewer (such as a data-table) to this data source. Note that\n * the stream provided will be accessed during change detection and should not directly change\n * values that are bound in template views.\n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?} Observable that emits a new value when the data changes.\n */\nconnect(collectionViewer: CollectionViewer) {}\n/**\n * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n * to perform any clean-up or tear-down operations when a view is being destroyed.\n * \n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?}\n */\ndisconnect(collectionViewer: CollectionViewer) {}\n}\n"],"names":["Subject"],"mappings":"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"}