{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              // @breaking-change 8.0.0 `_location` parameter to be made required.\n              @Optional() private _location?: Location) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject, Observer} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray, coerceElement} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      new Observable((observer: Observer<ConnectedOverlayPositionChange>) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._positionChangeSubscriptions--;\n        };\n      });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = coerceElement(origin);\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width < viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height < viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // @breaking-change 8.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n      this._appliedPanelClasses = [];\n    }\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config).forEach(k => {\n        const key = k as keyof OverlayConfig;\n\n        if (typeof config[key] !== 'undefined') {\n          this[key] = config[key];\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription, Observer} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  private _keydownEventsObservable: Observable<KeyboardEvent> =\n      new Observable((observer: Observer<KeyboardEvent>) => {\n        const subscription = this._keydownEvents.subscribe(observer);\n        this._keydownEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._keydownEventSubscriptions--;\n        };\n      });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      // @breaking-change 8.0.0 `_location` parameter to be made required.\n      private _location?: Location) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach && backdropToDetach.parentNode) {\n        backdropToDetach.parentNode.removeChild(backdropToDetach);\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .asObservable()\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @breaking-change 8.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n"],"names":["_overlayRef","updateSize","height","value","_height","GlobalPositionStrategy","prototype","centerHorizontally","offset","left","_justifyContent","centerVertically","top","_alignItems","apply","this","hasAttached","styles","overlayElement","style","parentStyles","hostElement","config","getConfig","position","_cssPosition","marginLeft","width","_leftOffset","marginTop","_topOffset","marginBottom","_bottomOffset","marginRight","_rightOffset","justifyContent","direction","alignItems","dispose","_isDisposed","parent","classList","remove","OverlayPositionBuilder","_viewportRuler","_document","_platform","_overlayContainer","global","connectedTo","elementRef","originPos","overlayPos","ConnectedPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","type","Injectable","args","providedIn","ViewportRuler","undefined","decorators","Inject","DOCUMENT","Platform","Optional","OverlayContainer","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_keyboardDispatcher","_injector","_ngZone","_directionality","_location","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","createElement","id","add","appendChild","getContainerElement","_appRef","get","ApplicationRef","DomPortalOutlet","ScrollStrategyOptions","ComponentFactoryResolver","OverlayKeyboardDispatcher","Injector","NgZone","Directionality","Location","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","_scrollStrategyFactory","scrollStrategy","Object","defineProperty","_offsetX","offsetX","_position","_updatePositionStrategy","_offsetY","offsetY","coerceBooleanProperty","ngOnDestroy","unsubscribe","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_this","positions","length","_buildConfig","keydownEvents","subscribe","event","next","keyCode","ESCAPE","positionStrategy","_createPositionStrategy","hasBackdrop","minWidth","minHeight","backdropClass","panelClass","map","currentPosition","setOrigin","origin","withPositions","withFlexibleDimensions","flexibleDimensions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","withLockedPosition","lockPosition","strategy","positionChanges","p","emit","TemplateRef","ViewContainerRef","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollingModule","exports","declarations","providers","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","getMatScrollStrategyAlreadyAttachedError","Error","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","validateVerticalPosition","property","validateHorizontalPosition","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","BlockScrollStrategy","document","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","NoopScrollStrategy","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","_a","noop","close","block","ScrollDispatcher","disposeOnNavigation","keys","forEach","k","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","_portalOutlet","_host","_pane","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","_keydownEventsObservable","Observable","observer","subscription","_positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","attachments","detachments","updatePositionStrategy","sizeConfig","tslib_1.__assign","setDirection","dir","addPanelClass","classes","removePanelClass","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","takeUntil","merge","children","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_appliedPanelClasses","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit","score","weight","_previousPushAmount","lastPosition","withScrollableContainers","margin","canPush","isLocked","coerceElement","withDefaultOffsetX","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","viewportRuler","platform","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","_width"],"mappings":"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"}