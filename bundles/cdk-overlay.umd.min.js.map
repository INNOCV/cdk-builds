{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    // Store the injected deps here because we can't use the `inject` function outside\n    // this function's context (including the inner function).\n    const scrollDispatcher = inject(ScrollDispatcher);\n    const viewportRuler = inject(ViewportRuler);\n    const ngZone = inject(NgZone);\n    return (config?: RepositionScrollStrategyConfig) =>\n        new RepositionScrollStrategy(scrollDispatcher, viewportRuler, ngZone, config);\n  },\n});\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      if (changes['positions'] || changes['_deprecatedPositions']) {\n        this._position.withPositions(this.positions);\n      }\n\n      if (changes['lockPosition']) {\n        this._position.withLockedPosition(this.lockPosition);\n      }\n\n      if (changes['origin'] || changes['_deprecatedOrigin']) {\n        this._position.setOrigin(this.origin.elementRef);\n\n        if (this.open) {\n          this._position.apply();\n        }\n      }\n    }\n\n    if (changes['open'] || changes['_deprecatedOpen']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this.origin.elementRef)\n      // Turn off all of the flexible positioning features for now to have it behave\n      // the same way as the old ConnectedPositionStrategy and to avoid breaking changes.\n      // TODO(crisbeto): make these on by default and add inputs for them\n      // next time we do breaking changes.\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withGrowAfterOpen(false)\n      .withLockedPosition(this.lockPosition);\n\n    this._setPositions(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /**\n   * Sets the primary and fallback positions of a positions strategy,\n   * based on the current directive inputs.\n   */\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\n      originX: pos.originX,\n      originY: pos.originY,\n      overlayX: pos.overlayX,\n      overlayY: pos.overlayY,\n      offsetX: pos.offsetX || this.offsetX,\n      offsetY: pos.offsetY || this.offsetY\n    }));\n\n    positionStrategy.withPositions(positions);\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\n        if (event.keyCode === ESCAPE) {\n          this._detachOverlay();\n        }\n      });\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    this._overlayRef.setDirection(this.dir);\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollDispatchModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [Overlay],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    public offsetX?: number,\n    public offsetY?: number) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayRef) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Select the appropriate overlay from a keydown event. */\n  private _selectOverlayFromEvent(event: KeyboardEvent): OverlayRef {\n    // Check if any overlays contain the event\n    const targetedOverlay = this._attachedOverlays.find(overlay => {\n      return overlay.overlayElement === event.target ||\n          overlay.overlayElement.contains(event.target as HTMLElement);\n    });\n\n    // Use the overlay if it exists, otherwise choose the most recently attached one\n    return targetedOverlay || this._attachedOverlays[this._attachedOverlays.length - 1];\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    if (this._attachedOverlays.length) {\n      // Dispatch keydown event to the correct overlay.\n      this._selectOverlayFromEvent(event)._keydownEvents.next(event);\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayRef} from '../overlay-ref';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: attribute selector to specify the transform-origin inside the overlay content\n// TODO: flexible position + centering doesn't work on IE11 (works on Edge).\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender = true;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      this._positionChanges.asObservable();\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    private _connectedTo: ElementRef,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document) {\n    this._origin = this._connectedTo.nativeElement;\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement!;\n    this._pane = overlayRef.overlayElement;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed.\n    if (this._isDisposed) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (!this._isDisposed) {\n      this.detach();\n      this._boundingBox = null;\n      this._positionChanges.complete();\n      this._isDisposed = true;\n    }\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the ovelray may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._origin = origin.nativeElement;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start The starting point from which the overlay is pushed.\n   * @param overlay The overlay dimensions.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n    // decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\n    let pushX, pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = viewport.left - start.x;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = viewport.top - start.y;\n    }\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   *\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    const scrollableViewProperties = this._getScrollVisibility();\n    const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n    this._positionChanges.next(changeEvent);\n    this._isInitialRender = false;\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay\n      // is vertically centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay\n      // is horizontally centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top, left, bottom, right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else if (this._isRtl()) {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-start' : 'flex-end';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getConfig().direction === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** The direction of the text in the overlay panel. */\n  direction?: Direction;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config)\n        .filter(key => typeof config[key] !== 'undefined')\n        .forEach(key => this[key] = config[key]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      if (Array.isArray(this._config.panelClass)) {\n        this._config.panelClass.forEach(cssClass => this._pane.classList.add(cssClass));\n      } else {\n        this._pane.classList.add(this._config.panelClass);\n      }\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n      this._config.positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking\n    this._keyboardDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents.asObservable();\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.apply();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._pane.setAttribute('dir', this._config.direction!);\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (this._config.width || this._config.width === 0) {\n      this._pane.style.width = coerceCssPixelValue(this._config.width);\n    }\n\n    if (this._config.height || this._config.height === 0) {\n      this._pane.style.height = coerceCssPixelValue(this._config.height);\n    }\n\n    if (this._config.minWidth || this._config.minWidth === 0) {\n      this._pane.style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    }\n\n    if (this._config.minHeight || this._config.minHeight === 0) {\n      this._pane.style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    }\n\n    if (this._config.maxWidth || this._config.maxWidth === 0) {\n      this._pane.style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    }\n\n    if (this._config.maxHeight || this._config.maxHeight === 0) {\n      this._pane.style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._backdropElement.classList.add(this._config.backdropClass);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        backdropToDetach.classList.remove(this._config.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {OverlayRef} from '../overlay-ref';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getConfig().direction === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef,\n      viewportRuler: ViewportRuler,\n      document: Document) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._validatePositions();\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._validatePositions();\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('ConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    // TODO(crisbeto): port these checks into the flexible positioning.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    parentStyles.justifyContent = config.width === '100%' ? 'flex-start' : this._justifyContent;\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Noop implemented as a part of the PositionStrategy interface.\n   * @docs-private\n   */\n  dispose(): void { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @deletion-target 7.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _appRef: ApplicationRef,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n\n}\n"],"names":["args","selector","exportAs","type","ElementRef","CdkOverlayOrigin","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","this","_hasBackdrop","_lockPosition","_backdropSubscription","Subscription","EMPTY","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","_templatePortal","TemplatePortal","Object","defineProperty","prototype","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","elementRef","apply","_attachOverlay","_detachOverlay","_createOverlay","length","defaultPositionList","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","position","flexibleConnectedTo","withFlexibleDimensions","withPush","withGrowAfterOpen","positionChanges","subscribe","p","_this","emit","map","pos","originX","originY","overlayX","overlayY","updateSize","keydownEvents","event","keyCode","ESCAPE","setDirection","dir","hasAttached","unsubscribe","dispose","Directive","Overlay","TemplateRef","ViewContainerRef","undefined","decorators","Inject","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","Directionality","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OverlayPositionBuilder","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_document","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","appendChild","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","Injectable","DOCUMENT","OverlayContainer","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OverlayKeyboardDispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","NgZone","_attachedOverlays","_keydownListener","_selectOverlayFromEvent","_keydownEvents","next","_isAttached","push","index","indexOf","splice","find","target","SkipSelf","parentNode","removeChild","getContainerElement","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","isArray","cssClass","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","direction","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","finishDetach_1","setTimeout","FlexibleConnectedPositionStrategy","_connectedTo","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_origin","nativeElement","hostElement","_boundingBox","change","_isDisposed","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","withViewportMargin","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","withDefaultOffsetX","offset","withDefaultOffsetY","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","ConnectedPositionStrategy","originPos","overlayPos","connectedTo","viewportRuler","_positionStrategy","withFallbackPosition","_direction","_validatePositions","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","pair","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","nextUniqueId","_overlayContainer","_componentFactoryResolver","_positionBuilder","_appRef","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","id","DomPortalOutlet","ComponentFactoryResolver","ApplicationRef","Injector","InjectionToken","factory","scrollDispatcher","inject","ngZone"],"mappings":"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"}