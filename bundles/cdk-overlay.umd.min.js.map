{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    // Store the injected deps here because we can't use the `inject` function outside\n    // this function's context (including the inner function).\n    const scrollDispatcher = inject(ScrollDispatcher);\n    const viewportRuler = inject(ViewportRuler);\n    const ngZone = inject(NgZone);\n    return (config?: RepositionScrollStrategyConfig) =>\n        new RepositionScrollStrategy(scrollDispatcher, viewportRuler, ngZone, config);\n  },\n});\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number = 0;\n  private _offsetY: number = 0;\n  private _position: FlexibleConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      if (changes['positions'] || changes['_deprecatedPositions']) {\n        this._position.withPositions(this.positions);\n      }\n\n      if (changes['lockPosition']) {\n        this._position.withLockedPosition(this.lockPosition);\n      }\n\n      if (changes['origin'] || changes['_deprecatedOrigin']) {\n        this._position.setOrigin(this.origin.elementRef);\n\n        if (this.open) {\n          this._position.apply();\n        }\n      }\n    }\n\n    if (changes['open'] || changes['_deprecatedOpen']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this.origin.elementRef)\n      // Turn off all of the flexible positioning features for now to have it behave\n      // the same way as the old ConnectedPositionStrategy and to avoid breaking changes.\n      // TODO(crisbeto): make these on by default and add inputs for them\n      // next time we do breaking changes.\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withPush(false)\n      .withGrowAfterOpen(false)\n      .withLockedPosition(this.lockPosition);\n\n    this._setPositions(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /**\n   * Sets the primary and fallback positions of a positions strategy,\n   * based on the current directive inputs.\n   */\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\n      originX: pos.originX,\n      originY: pos.originY,\n      overlayX: pos.overlayX,\n      overlayY: pos.overlayY,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY\n    }));\n\n    positionStrategy.withPositions(positions);\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\n        if (event.keyCode === ESCAPE) {\n          this._detachOverlay();\n        }\n      });\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    this._overlayRef.setDirection(this.dir);\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollDispatchModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [Overlay],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer {\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let fullscreenElement = this.getFullscreenElement();\n    let parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if ((document as any).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if ((document as any).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        (document as any).mozFullScreenElement ||\n        (document as any).msFullscreenElement ||\n        null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    public offsetX?: number,\n    public offsetY?: number) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayRef) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Select the appropriate overlay from a keydown event. */\n  private _selectOverlayFromEvent(event: KeyboardEvent): OverlayRef {\n    // Check if any overlays contain the event\n    const targetedOverlay = this._attachedOverlays.find(overlay => {\n      return overlay.overlayElement === event.target ||\n          overlay.overlayElement.contains(event.target as HTMLElement);\n    });\n\n    // Use the overlay if it exists, otherwise choose the most recently attached one\n    return targetedOverlay || this._attachedOverlays[this._attachedOverlays.length - 1];\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    if (this._attachedOverlays.length) {\n      // Dispatch keydown event to the correct overlay.\n      this._selectOverlayFromEvent(event)._keydownEvents.next(event);\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {take} from 'rxjs/operators/take';\nimport {Subject} from 'rxjs/Subject';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      if (Array.isArray(this._config.panelClass)) {\n        this._config.panelClass.forEach(cssClass => this._pane.classList.add(cssClass));\n      } else {\n        this._pane.classList.add(this._config.panelClass);\n      }\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n      this._config.positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking\n    this._keyboardDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents.asObservable();\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.apply();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._pane.setAttribute('dir', this._config.direction!);\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (this._config.width || this._config.width === 0) {\n      this._pane.style.width = formatCssUnit(this._config.width);\n    }\n\n    if (this._config.height || this._config.height === 0) {\n      this._pane.style.height = formatCssUnit(this._config.height);\n    }\n\n    if (this._config.minWidth || this._config.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._config.minWidth);\n    }\n\n    if (this._config.minHeight || this._config.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._config.minHeight);\n    }\n\n    if (this._config.maxWidth || this._config.maxWidth === 0) {\n      this._pane.style.maxWidth = formatCssUnit(this._config.maxWidth);\n    }\n\n    if (this._config.maxHeight || this._config.maxHeight === 0) {\n      this._pane.style.maxHeight = formatCssUnit(this._config.maxHeight);\n    }\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._backdropElement.classList.add(this._config.backdropClass);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        backdropToDetach.classList.remove(this._config.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n}\n\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? value as string : `${value}px`;\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport {OverlayRef} from '../overlay-ref';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\n\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: attribute selector to specify the transform-origin inside the overlay content\n// TODO: flexible position + centering doesn't work on IE11 (works on Edge).\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender = true;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's height can be constrained to fit within the viewport. */\n  private _hasFlexibleHeight = true;\n\n  /** Whether the overlay's width can be constrained to fit within the viewport. */\n  private _hasFlexibleWidth = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin: number = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      this._positionChanges.asObservable();\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    private _connectedTo: ElementRef,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document) {\n    this._origin = this._connectedTo.nativeElement;\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement!;\n    this._pane = overlayRef.overlayElement;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed.\n    if (this._isDisposed) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (!this._isDisposed) {\n      this.detach();\n      this._boundingBox = null;\n      this._positionChanges.complete();\n      this._isDisposed = true;\n    }\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the ovelray may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's height can be constrained to fit within the viewport. */\n  withFlexibleHeight(flexibleHeight = true): this {\n    this._hasFlexibleHeight = flexibleHeight;\n    return this;\n  }\n\n  /** Sets whether the overlay's width can be constrained to fit within the viewport. */\n  withFlexibleWidth(flexibleWidth = true): this {\n    this._hasFlexibleWidth = flexibleWidth;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._origin = origin.nativeElement;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (position.offsetX) {\n      x += position.offsetX;\n    }\n\n    if (position.offsetY) {\n      y += position.offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleWidth || this._hasFlexibleWidth) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight || 0;\n      const minWidth = this._overlayRef.getConfig().minWidth || 0;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (this._hasFlexibleHeight && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (this._hasFlexibleWidth && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start The starting point from which the overlay is pushed.\n   * @param overlay The overlay dimensions.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n    // decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\n    let pushX, pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = viewport.left - start.x;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = viewport.top - start.y;\n    }\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   *\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    const scrollableViewProperties = this._getScrollVisibility();\n    const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n    this._positionChanges.next(changeEvent);\n    this._isInitialRender = false;\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge.\n      bottom = viewport.height - origin.y + this._viewportMargin;\n      height = viewport.height - bottom;\n    } else {\n      // If neither top nor bottom, it means that the overlay\n      // is vertically centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !this._isRtl()) ||\n        (position.overlayX === 'end' && this._isRtl());\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !this._isRtl()) ||\n        (position.overlayX === 'start' && this._isRtl());\n\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay\n      // is horizontally centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top, left, bottom, right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (!this._hasFlexibleHeight || this._isPushed) {\n      styles.top = '0';\n      styles.bottom = '';\n      styles.height = '100%';\n    } else {\n      styles.height = `${boundingBoxRect.height}px`;\n      styles.top = boundingBoxRect.top != null ? `${boundingBoxRect.top}px` : '';\n      styles.bottom = boundingBoxRect.bottom != null ? `${boundingBoxRect.bottom}px` : '';\n    }\n\n    if (!this._hasFlexibleWidth || this._isPushed) {\n      styles.left = '0';\n      styles.right = '';\n      styles.width = '100%';\n    } else {\n      styles.width = `${boundingBoxRect.width}px`;\n      styles.left = boundingBoxRect.left != null ? `${boundingBoxRect.left}px` : '';\n      styles.right = boundingBoxRect.right != null ? `${boundingBoxRect.right}px` : '';\n    }\n\n    const maxHeight = this._overlayRef.getConfig().maxHeight;\n    if (maxHeight && this._hasFlexibleHeight) {\n      styles.maxHeight = formatCssUnit(maxHeight);\n    }\n\n    const maxWidth = this._overlayRef.getConfig().maxWidth;\n    if (maxWidth && this._hasFlexibleWidth) {\n      styles.maxWidth = formatCssUnit(maxWidth);\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    // Reset styles from any previous positioning.\n    const styles = {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n    } as CSSStyleDeclaration;\n\n    // Align the overlay panel to the appropriate edge of the\n    // size-constraining container unless using a 'center' position.\n    if (this._hasFlexibleWidth && position.overlayX !== 'center' && !this._isPushed) {\n      if (this._isRtl()) {\n        styles[position.overlayX === 'end' ? 'left' : 'right'] = '0';\n      } else {\n        styles[position.overlayX === 'end' ? 'right' : 'left'] = '0';\n      }\n    }\n\n    if (this._hasFlexibleHeight && position.overlayY !== 'center' && !this._isPushed) {\n      styles[position.overlayY === 'bottom' ? 'bottom' : 'top'] = '0';\n    }\n\n    if (!this._hasFlexibleHeight || this._isPushed) {\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\n    }\n\n    if (!this._hasFlexibleWidth || this._isPushed) {\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = ' ';\n\n    if (position.offsetX) {\n      transformString += `translateX(${position.offsetX}px)`;\n    }\n\n    if (position.offsetY) {\n      transformString += `translateY(${position.offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleHeight && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleWidth && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    // Push the pane content towards the proper direction.\n    if (position.overlayX === 'center') {\n      styles.justifyContent = 'center';\n    } else {\n      styles.justifyContent = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = `${overlayPoint.y}px`;\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = `${overlayPoint.x}px`;\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width  - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getConfig().direction === 'rtl';\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\n// TODO: move to common place\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? value as string : `${value}px`;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** The direction of the text in the overlay panel. */\n  direction?: Direction;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config)\n        .filter(key => typeof config[key] !== 'undefined')\n        .forEach(key => this[key] = config[key]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable} from 'rxjs/Observable';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {OverlayRef} from '../overlay-ref';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\n\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getConfig().direction === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef,\n      viewportRuler: ViewportRuler,\n      document: Document) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document)\n        .withFlexibleHeight(false)\n        .withFlexibleWidth(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._validatePositions();\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._validatePositions();\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._preferredPositions.forEach(position => {\n      if (position.offsetX == null) {\n        position.offsetX = offset;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._preferredPositions.forEach(position => {\n      if (position.offsetY == null) {\n        position.offsetY = offset;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('ConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    // TODO(crisbeto): port these checks into the flexible positioning.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @deletion-target 7.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    parentStyles.justifyContent = config.width === '100%' ? 'flex-start' : this._justifyContent;\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Noop implemented as a part of the PositionStrategy interface.\n   * @docs-private\n   */\n  dispose(): void { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @deletion-target 7.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _appRef: ApplicationRef,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n\n}\n"],"names":["type","ElementRef","CdkOverlayOrigin","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","this","_hasBackdrop","_lockPosition","_backdropSubscription","Subscription","EMPTY","_offsetX","_offsetY","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","_templatePortal","TemplatePortal","Object","defineProperty","prototype","offsetX","_position","_setPositions","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","elementRef","apply","_attachOverlay","_detachOverlay","_createOverlay","length","defaultPositionList","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","position","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withPush","withGrowAfterOpen","positionChanges","subscribe","p","_this","emit","map","pos","originX","originY","overlayX","overlayY","updateSize","keydownEvents","event","keyCode","ESCAPE","setDirection","dir","hasAttached","unsubscribe","dispose","Directive","args","selector","exportAs","Overlay","TemplateRef","ViewContainerRef","undefined","decorators","Inject","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","Directionality","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OverlayPositionBuilder","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","tslib_1.__extends","FullscreenOverlayContainer","_super","_createContainer","call","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","document","body","appendChild","fn","fullscreenEnabled","addEventListener","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","Injectable","OverlayContainer","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","_document","OverlayKeyboardDispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","formatCssUnit","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","NgZone","DOCUMENT","_attachedOverlays","_keydownListener","_selectOverlayFromEvent","_keydownEvents","next","_isAttached","push","index","indexOf","splice","find","target","removeEventListener","SkipSelf","parentNode","removeChild","getContainerElement","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","isArray","cssClass","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","direction","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","finishDetach_1","setTimeout","FlexibleConnectedPositionStrategy","_connectedTo","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleHeight","_hasFlexibleWidth","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_origin","nativeElement","hostElement","_boundingBox","change","_isDisposed","_lastPosition","reapplyLastPosition","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","withViewportMargin","margin","flexibleHeight","flexibleWidth","growAfterOpen","canPush","isLocked","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","ConnectedPositionStrategy","originPos","overlayPos","connectedTo","viewportRuler","_positionStrategy","withFallbackPosition","_direction","_validatePositions","recalculateLastPosition","withDirection","withOffsetX","offset","withOffsetY","slice","pair","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","nextUniqueId","_overlayContainer","_componentFactoryResolver","_positionBuilder","_appRef","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","id","DomPortalOutlet","ComponentFactoryResolver","ApplicationRef","Injector","InjectionToken","factory","scrollDispatcher","inject","ngZone"],"mappings":"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"}