{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDiemsions() { return this._flexibleDimensions; }\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      if (changes['positions']) {\n        this._position.withPositions(this.positions);\n      }\n\n      if (changes['lockPosition']) {\n        this._position.withLockedPosition(this.lockPosition);\n      }\n\n      if (changes['origin']) {\n        this._position.setOrigin(this.origin.elementRef);\n\n        if (this.open) {\n          this._position.apply();\n        }\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this.origin.elementRef)\n      .withFlexibleDimensions(this.flexibleDiemsions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n\n    this._setPositions(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /**\n   * Sets the primary and fallback positions of a positions strategy,\n   * based on the current directive inputs.\n   */\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\n      originX: pos.originX,\n      originY: pos.originY,\n      overlayX: pos.overlayX,\n      overlayY: pos.overlayY,\n      offsetX: pos.offsetX || this.offsetX,\n      offsetY: pos.offsetY || this.offsetY\n    }));\n\n    positionStrategy.withPositions(positions);\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\n        this.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE) {\n          this._detachOverlay();\n        }\n      });\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollDispatchModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    public offsetX?: number,\n    public offsetY?: number) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender = true;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create(observer => {\n    const subscription = this._positionChanges.subscribe(observer);\n    this._positionChangeSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._positionChangeSubscriptions--;\n    };\n  });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (!this._isDisposed) {\n      this.detach();\n      this._boundingBox = null;\n      this._positionChanges.complete();\n      this._isDisposed = true;\n    }\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start The starting point from which the overlay is pushed.\n   * @param overlay The overlay dimensions.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point, overlay: ClientRect): Point {\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n    // decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n    // Amount by which to push the overlay in each direction such that it remains on-screen.\n    let pushX, pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = viewport.left - start.x;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = viewport.top - start.y;\n    }\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay\n      // is vertically centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay\n      // is horizontally centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top, left, bottom, right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      extendStyles(styles, this._getExactOverlayY(position, originPoint));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition, originPoint: Point) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config)\n        .filter(key => typeof config[key] !== 'undefined')\n        .forEach(key => this[key] = config[key]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Observable, Subject, merge} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\n    const subscription = this._keydownEvents.subscribe(observer);\n    this._keydownEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._keydownEventSubscriptions--;\n    };\n  });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n      this._config.positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, false);\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\n    // even though it's transparent and unclickable. We can't remove the host here immediately,\n    // because the overlay pane's content might still be animating. This stream helps us avoid\n    // interrupting the animation by waiting for the pane to become empty.\n    const subscription = this._ngZone.onStable\n      .asObservable()\n      .pipe(takeUntil(merge(this._attachments, this._detachments)))\n      .subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.apply();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let timeoutId: number;\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\n      });\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 7.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @breaking-change 7.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 7.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 7.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Noop implemented as a part of the PositionStrategy interface.\n   * @docs-private\n   */\n  dispose(): void { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 7.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n"],"names":["this","_componentFactoryResolver","_positionBuilder","_keyboardDispatcher","_injector","_ngZone","_document","_directionality","Overlay","prototype","create","config","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","direction","value","OverlayRef","position","createElement","id","nextUniqueId","classList","add","appendChild","_overlayContainer","getContainerElement","_appRef","get","ApplicationRef","DomPortalOutlet","type","Injectable","ScrollStrategyOptions","OverlayContainer","ComponentFactoryResolver","OverlayPositionBuilder","OverlayKeyboardDispatcher","Injector","NgZone","undefined","decorators","Inject","args","DOCUMENT","Directionality","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","Object","defineProperty","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","_buildConfig","positionStrategy","_createPositionStrategy","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","p","_this","emit","map","pos","updateSize","keydownEvents","event","next","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","_portalOutlet","_host","_pane","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_keydownEventsObservable","Observable","observer","subscription","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","takeUntil","merge","children","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform"],"mappings":"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"}