{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 7.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param elementRef\n   */\n  flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._setPositions(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDiemsions() { return this._flexibleDimensions; }\n  set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      if (changes['positions']) {\n        this._position.withPositions(this.positions);\n      }\n\n      if (changes['lockPosition']) {\n        this._position.withLockedPosition(this.lockPosition);\n      }\n\n      if (changes['origin']) {\n        this._position.setOrigin(this.origin.elementRef);\n\n        if (this.open) {\n          this._position.apply();\n        }\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this.origin.elementRef)\n      .withFlexibleDimensions(this.flexibleDiemsions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n\n    this._setPositions(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /**\n   * Sets the primary and fallback positions of a positions strategy,\n   * based on the current directive inputs.\n   */\n  private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(pos => ({\n      originX: pos.originX,\n      originY: pos.originY,\n      overlayX: pos.overlayX,\n      overlayY: pos.overlayY,\n      offsetX: pos.offsetX || this.offsetX,\n      offsetY: pos.offsetY || this.offsetY\n    }));\n\n    positionStrategy.withPositions(positions);\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n\n      this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => {\n        this.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE) {\n          this._detachOverlay();\n        }\n      });\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  /** Destroys the overlay created by this directive. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollDispatchModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    return this._document.fullscreenElement ||\n           this._document.webkitFullscreenElement ||\n           (this._document as any).mozFullScreenElement ||\n           (this._document as any).msFullscreenElement ||\n           null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    public offsetX?: number,\n    public offsetY?: number) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender = true;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: HTMLElement;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Amount of subscribers to the `positionChanges` stream. */\n  private _positionChangeSubscriptions = 0;\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create(observer => {\n    const subscription = this._positionChanges.subscribe(observer);\n    this._positionChangeSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._positionChangeSubscriptions--;\n    };\n  });\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions() {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: ElementRef | HTMLElement,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    private _platform?: Platform,\n    private _overlayContainer?: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        this._isInitialRender = true;\n        this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach() {\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose() {\n    if (!this._isDisposed) {\n      this.detach();\n      this._boundingBox = null;\n      this._positionChanges.complete();\n      this._isDisposed = true;\n    }\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this.scrollables = scrollables;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef | HTMLElement): this {\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n        return {\n            x: start.x + this._previousPushAmount.x,\n            y: start.y + this._previousPushAmount.y\n        };\n    }\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width < viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height < viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay\n      // is vertically centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay\n      // is horizontally centered on the origin point.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x, origin.x - viewport.top);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top, left, bottom, right, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n    let virtualKeyboardOffset = this._overlayContainer ?\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._origin.getBoundingClientRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      Object.keys(config)\n        .filter(key => typeof config[key] !== 'undefined')\n        .forEach(key => this[key] = config[key]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n      body.style['scrollBehavior'] = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Observable, Subject, merge} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n  private _keydownEventsObservable: Observable<KeyboardEvent> = Observable.create(observer => {\n    const subscription = this._keydownEvents.subscribe(observer);\n    this._keydownEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._keydownEventSubscriptions--;\n    };\n  });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document) {\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n      this._config.positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, false);\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\n    // even though it's transparent and unclickable. We can't remove the host here immediately,\n    // because the overlay pane's content might still be animating. This stream helps us avoid\n    // interrupting the animation by waiting for the pane to become empty.\n    const subscription = this._ngZone.onStable\n      .asObservable()\n      .pipe(takeUntil(merge(this._attachments, this._detachments)))\n      .subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition() {\n    if (this._config.positionStrategy) {\n      this._config.positionStrategy.apply();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig) {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality) {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click',\n        (event: MouseEvent) => this._backdropClick.next(event));\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let timeoutId: number;\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        backdropToDetach!.addEventListener('transitionend', finishDetach);\n      });\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 7.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>,\n      viewportRuler: ViewportRuler,\n      document: Document,\n      // @breaking-change 7.0.0 `platform` parameter to be made required.\n      platform?: Platform) {\n\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy =\n      new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n        .withFlexibleDimensions(false)\n        .withPush(false)\n        .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 7.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 7.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Noop implemented as a part of the PositionStrategy interface.\n   * @docs-private\n   */\n  dispose(): void { }\n}\n"],"names":["type","Platform","decorators","Optional","OverlayContainer","OverlayPositionBuilder","nextUniqueId","Overlay","scrollStrategies","_overlayContainer","_componentFactoryResolver","_positionBuilder","_keyboardDispatcher","_injector","_ngZone","_document","_directionality","this","prototype","create","config","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","direction","value","OverlayRef","position","createElement","id","classList","add","appendChild","getContainerElement","_appRef","get","ApplicationRef","DomPortalOutlet","Injectable","ScrollStrategyOptions","ComponentFactoryResolver","OverlayKeyboardDispatcher","Injector","NgZone","undefined","Inject","args","DOCUMENT","Directionality","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","overlayKeydown","_templatePortal","TemplatePortal","Object","defineProperty","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","_buildConfig","positionStrategy","_createPositionStrategy","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","p","_this","emit","map","pos","updateSize","keydownEvents","event","next","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OverlayModule","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","getFullscreenElement","body","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","reposition","setPrototypeOf","__proto__","Array","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","overlays","_keydownEventSubscriptions","_keydownEvents","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","container","_portalOutlet","_host","_pane","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_keydownEventsObservable","Observable","observer","subscription","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","takeUntil","merge","children","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_positionChangeSubscriptions","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","_previousPushAmount","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global"],"mappings":"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"}